cscope 15 $HOME/JOS/lab -q 0000000772 0000089101
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

39 
	$boŸmaö
()

41 
Proghdr
 *
ph
, *
ïh
;

44 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

47 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

48 
bad
;

51 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

52 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

53 ; 
ph
 < 
ïh
;Öh++)

56 
	`ªad£g
(
ph
->
p_∑
,Öh->
p_memsz
,Öh->
p_off£t
);

60 (((*)()Ë(
ELFHDR
->
e_íåy
))();

62 
bad
:

63 
	`outw
(0x8A00, 0x8A00);

64 
	`outw
(0x8A00, 0x8E00);

67 
	}
}

72 
	$ªad£g
(
uöt32_t
 
∑
, uöt32_à
cou¡
, uöt32_à
off£t
)

74 
uöt32_t
 
íd_∑
;

76 
íd_∑
 = 
∑
 + 
cou¡
;

79 
∑
 &~(
SECTSIZE
 - 1);

82 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

87 
∑
 < 
íd_∑
) {

92 
	`ªad£˘
((
uöt8_t
*Ë
∑
, 
off£t
);

93 
∑
 +
SECTSIZE
;

94 
off£t
++;

96 
	}
}

99 
	$waôdisk
()

102 (
	`öb
(0x1F7) & 0xC0) != 0x40)

104 
	}
}

107 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

110 
	`waôdisk
();

112 
	`outb
(0x1F2, 1);

113 
	`outb
(0x1F3, 
off£t
);

114 
	`outb
(0x1F4, 
off£t
 >> 8);

115 
	`outb
(0x1F5, 
off£t
 >> 16);

116 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

117 
	`outb
(0x1F7, 0x20);

120 
	`waôdisk
();

123 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

124 
	}
}

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	sElf
 {

7 
uöt32_t
 
	me_magic
;

8 
uöt8_t
 
	me_ñf
[12];

9 
uöt16_t
 
	me_ty≥
;

10 
uöt16_t
 
	me_machöe
;

11 
uöt32_t
 
	me_vîsi⁄
;

12 
uöt32_t
 
	me_íåy
;

13 
uöt32_t
 
	me_phoff
;

14 
uöt32_t
 
	me_shoff
;

15 
uöt32_t
 
	me_Êags
;

16 
uöt16_t
 
	me_ehsize
;

17 
uöt16_t
 
	me_phítsize
;

18 
uöt16_t
 
	me_phnum
;

19 
uöt16_t
 
	me_shítsize
;

20 
uöt16_t
 
	me_shnum
;

21 
uöt16_t
 
	me_sh°∫dx
;

24 
	sProghdr
 {

25 
uöt32_t
 
	mp_ty≥
;

26 
uöt32_t
 
	mp_off£t
;

27 
uöt32_t
 
	mp_va
;

28 
uöt32_t
 
	mp_∑
;

29 
uöt32_t
 
	mp_fûesz
;

30 
uöt32_t
 
	mp_memsz
;

31 
uöt32_t
 
	mp_Êags
;

32 
uöt32_t
 
	mp_Æign
;

35 
	sSe˘hdr
 {

36 
uöt32_t
 
	msh_«me
;

37 
uöt32_t
 
	msh_ty≥
;

38 
uöt32_t
 
	msh_Êags
;

39 
uöt32_t
 
	msh_addr
;

40 
uöt32_t
 
	msh_off£t
;

41 
uöt32_t
 
	msh_size
;

42 
uöt32_t
 
	msh_lök
;

43 
uöt32_t
 
	msh_öfo
;

44 
uöt32_t
 
	msh_addølign
;

45 
uöt32_t
 
	msh_ítsize
;

49 
	#ELF_PROG_LOAD
 1

	)

52 
	#ELF_PROG_FLAG_EXEC
 1

	)

53 
	#ELF_PROG_FLAG_WRITE
 2

	)

54 
	#ELF_PROG_FLAG_READ
 4

	)

57 
	#ELF_SHT_NULL
 0

	)

58 
	#ELF_SHT_PROGBITS
 1

	)

59 
	#ELF_SHT_SYMTAB
 2

	)

60 
	#ELF_SHT_STRTAB
 3

	)

63 
	#ELF_SHN_UNDEF
 0

	)

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

8 
	mE_UNSPECIFIED
 = 1,

9 
	mE_BAD_ENV
 = 2,

11 
	mE_INVAL
 = 3,

12 
	mE_NO_MEM
 = 4,

13 
	mE_NO_FREE_ENV
 = 5,

15 
	mE_FAULT
 = 6,

17 
	mMAXERROR


	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/malloc.h

1 #i‚de‡
JOS_INC_MALLOC_H


2 
	#JOS_INC_MALLOC_H
 1

	)

4 *
mÆloc
(
size_t
 
size
);

5 
‰ì
(*
addr
);

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/queue.h
>

7 
	~<öc/mmu.h
>

16 
	#GD_KT
 0x08

17 
	#GD_KD
 0x10

18 
	#GD_UT
 0x18

19 
	#GD_UD
 0x20

20 
	#GD_TSS
 0x28

21 

	)

82 
	#KERNBASE
 0xF0000000

	)

87 
	#IOPHYSMEM
 0x0A0000

	)

88 
	#EXTPHYSMEM
 0x100000

	)

94 
	#VPT
 (
KERNBASE
 - 
PTSIZE
)

	)

95 
	#KSTACKTOP
 
VPT


	)

96 
	#KSTKSIZE
 (8*
PGSIZE
)

97 
	#ULIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

105 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

107 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

109 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

116 
	#UTOP
 
UENVS


	)

118 
	#UXSTACKTOP
 
UTOP


	)

121 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

124 
	#UTEXT
 (2*
PTSIZE
)

	)

127 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

130 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

132 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

135 #i‚de‡
__ASSEMBLER__


151 
uöt32_t
 
	t±e_t
;

152 
uöt32_t
 
	tpde_t
;

154 vﬁ©ûê
±e_t
 
v±
[];

155 vﬁ©ûê
pde_t
 
vpd
[];

168 
LIST_HEAD
(
Page_li°
, 
Page
);

169 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

171 
	sPage
 {

172 
Page_LIST_íåy_t
 
µ_lök
;

179 
uöt16_t
 
µ_ªf
;

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
∑
Ë(((
uöçå_t
Ë’a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 

	)

34 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

35 
	#VPD
(
œ
Ë
	`PDX
(la)

36 

	)

38 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

41 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

44 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

47 
	#NPDENTRIES
 1024

48 
	#NPTENTRIES
 1024

49 

	)

50 
	#PGSIZE
 4096

51 
	#PGSHIFT
 12

52 

	)

53 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

54 
	#PTSHIFT
 22

55 

	)

56 
	#PTXSHIFT
 12

57 
	#PDXSHIFT
 22

58 

	)

60 
	#PTE_P
 0x001

61 
	#PTE_W
 0x002

62 
	#PTE_U
 0x004

63 
	#PTE_PWT
 0x008

64 
	#PTE_PCD
 0x010

65 
	#PTE_A
 0x020

66 
	#PTE_D
 0x040

67 
	#PTE_PS
 0x080

68 
	#PTE_G
 0x100

69 

	)

72 
	#PTE_AVAIL
 0xE00

73 

	)

75 
	#PTE_ALLOWED
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

78 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

81 
	#CR0_PE
 0x00000001

82 
	#CR0_MP
 0x00000002

83 
	#CR0_EM
 0x00000004

84 
	#CR0_TS
 0x00000008

85 
	#CR0_ET
 0x00000010

86 
	#CR0_NE
 0x00000020

87 
	#CR0_WP
 0x00010000

88 
	#CR0_AM
 0x00040000

89 
	#CR0_NW
 0x20000000

90 
	#CR0_CD
 0x40000000

91 
	#CR0_PG
 0x80000000

92 

	)

93 
	#CR4_PCE
 0x00000100

94 
	#CR4_MCE
 0x00000040

95 
	#CR4_PSE
 0x00000010

96 
	#CR4_DE
 0x00000008

97 
	#CR4_TSD
 0x00000004

98 
	#CR4_PVI
 0x00000002

99 
	#CR4_VME
 0x00000001

100 

	)

102 
	#FL_CF
 0x00000001

103 
	#FL_PF
 0x00000004

104 
	#FL_AF
 0x00000010

105 
	#FL_ZF
 0x00000040

106 
	#FL_SF
 0x00000080

107 
	#FL_TF
 0x00000100

108 
	#FL_IF
 0x00000200

109 
	#FL_DF
 0x00000400

110 
	#FL_OF
 0x00000800

111 
	#FL_IOPL_MASK
 0x00003000

112 
	#FL_IOPL_0
 0x00000000

113 
	#FL_IOPL_1
 0x00001000

114 
	#FL_IOPL_2
 0x00002000

115 
	#FL_IOPL_3
 0x00003000

116 
	#FL_NT
 0x00004000

117 
	#FL_RF
 0x00010000

118 
	#FL_VM
 0x00020000

119 
	#FL_AC
 0x00040000

120 
	#FL_VIF
 0x00080000

121 
	#FL_VIP
 0x00100000

122 
	#FL_ID
 0x00200000

123 

	)

125 
	#FEC_PR
 0x1

126 
	#FEC_WR
 0x2

127 
	#FEC_U
 0x4

128 

	)

136 #ifde‡
__ASSEMBLER__


141 
	#SEG_NULL
 \

142 .
w‹d
 0, 0; \

143 .
byã
 0, 0, 0, 0

	)

144 
	#SEG
(
ty≥
,
ba£
,
lim
) \

145 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

146 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

147 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

151 
	~<öc/ty≥s.h
>

154 
	sSegdesc
 {

155 
	msd_lim_15_0
 : 16;

156 
	msd_ba£_15_0
 : 16;

157 
	msd_ba£_23_16
 : 8;

158 
	msd_ty≥
 : 4;

159 
	msd_s
 : 1;

160 
	msd_d∂
 : 2;

161 
	msd_p
 : 1;

162 
	msd_lim_19_16
 : 4;

163 
	msd_avl
 : 1;

164 
	msd_rsv1
 : 1;

165 
	msd_db
 : 1;

166 
	msd_g
 : 1;

167 
	msd_ba£_31_24
 : 8;

170 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

172 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

174 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

175 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

176 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

177 (Ë(
ba£
Ë>> 24 }

	)

178 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

179 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

180 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

181 (Ë(
ba£
Ë>> 24 }

	)

186 
	#STA_X
 0x8

187 
	#STA_E
 0x4

188 
	#STA_C
 0x4

189 
	#STA_W
 0x2

190 
	#STA_R
 0x2

191 
	#STA_A
 0x1

192 

	)

194 
	#STS_T16A
 0x1

195 
	#STS_LDT
 0x2

196 
	#STS_T16B
 0x3

197 
	#STS_CG16
 0x4

198 
	#STS_TG
 0x5

199 
	#STS_IG16
 0x6

200 
	#STS_TG16
 0x7

201 
	#STS_T32A
 0x9

202 
	#STS_T32B
 0xB

203 
	#STS_CG32
 0xC

204 
	#STS_IG32
 0xE

205 
	#STS_TG32
 0xF

206 

	)

214 #i‚de‡
__ASSEMBLER__


217 
	sTask°©e
 {

218 
uöt32_t
 
	mts_lök
;

219 
uöçå_t
 
	mts_e•0
;

220 
uöt16_t
 
	mts_ss0
;

221 
uöt16_t
 
	mts_∑ddög1
;

222 
uöçå_t
 
	mts_e•1
;

223 
uöt16_t
 
	mts_ss1
;

224 
uöt16_t
 
	mts_∑ddög2
;

225 
uöçå_t
 
	mts_e•2
;

226 
uöt16_t
 
	mts_ss2
;

227 
uöt16_t
 
	mts_∑ddög3
;

228 
phyßddr_t
 
	mts_¸3
;

229 
uöçå_t
 
	mts_eù
;

230 
uöt32_t
 
	mts_eÊags
;

231 
uöt32_t
 
	mts_óx
;

232 
uöt32_t
 
	mts_ecx
;

233 
uöt32_t
 
	mts_edx
;

234 
uöt32_t
 
	mts_ebx
;

235 
uöçå_t
 
	mts_e•
;

236 
uöçå_t
 
	mts_ebp
;

237 
uöt32_t
 
	mts_esi
;

238 
uöt32_t
 
	mts_edi
;

239 
uöt16_t
 
	mts_es
;

240 
uöt16_t
 
	mts_∑ddög4
;

241 
uöt16_t
 
	mts_cs
;

242 
uöt16_t
 
	mts_∑ddög5
;

243 
uöt16_t
 
	mts_ss
;

244 
uöt16_t
 
	mts_∑ddög6
;

245 
uöt16_t
 
	mts_ds
;

246 
uöt16_t
 
	mts_∑ddög7
;

247 
uöt16_t
 
	mts_fs
;

248 
uöt16_t
 
	mts_∑ddög8
;

249 
uöt16_t
 
	mts_gs
;

250 
uöt16_t
 
	mts_∑ddög9
;

251 
uöt16_t
 
	mts_ldt
;

252 
uöt16_t
 
	mts_∑ddög10
;

253 
uöt16_t
 
	mts_t
;

254 
uöt16_t
 
	mts_iomb
;

258 
	sG©edesc
 {

259 
	mgd_off_15_0
 : 16;

260 
	mgd_ss
 : 16;

261 
	mgd_¨gs
 : 5;

262 
	mgd_rsv1
 : 3;

263 
	mgd_ty≥
 : 4;

264 
	mgd_s
 : 1;

265 
	mgd_d∂
 : 2;

266 
	mgd_p
 : 1;

267 
	mgd_off_31_16
 : 16;

284 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

286 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

287 (
g©e
).
gd_ss
 = (
£l
); \

288 (
g©e
).
gd_¨gs
 = 0; \

289 (
g©e
).
gd_rsv1
 = 0; \

290 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

291 (
g©e
).
gd_s
 = 0; \

292 (
g©e
).
gd_d∂
 = (
d∂
); \

293 (
g©e
).
gd_p
 = 1; \

294 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

295 }

	)

298 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

300 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

301 (
g©e
).
gd_ss
 = (
ss
); \

302 (
g©e
).
gd_¨gs
 = 0; \

303 (
g©e
).
gd_rsv1
 = 0; \

304 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

305 (
g©e
).
gd_s
 = 0; \

306 (
g©e
).
gd_d∂
 = (
d∂
); \

307 (
g©e
).
gd_p
 = 1; \

308 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

309 }

	)

312 
	sP£udodesc
 {

313 
uöt16_t
 
	mpd_lim
;

314 
uöt32_t
 
	mpd_ba£
;

315 } 
__©åibuã__
 ((
∑cked
));

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöçå_t
 
	mn_vÆue
;

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

6 
__buûtö_va_li°
 
	tva_li°
;

8 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
◊p,Üa°)

	)

10 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
◊p,Åy≥)

	)

12 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
˝utch¨
(
c
);

12 
gëch¨
();

13 
isc⁄s
(
fd
);

16 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

17 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

18 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

19 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

22 
	`˝rötf
(c⁄° *
fmt
, ...);

23 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

26 
	`¥ötf
(c⁄° *
fmt
, ...);

27 
	`Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	`vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

31 * 
	`ªadlöe
(c⁄° *
¥om±
);

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

11 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

12 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

13 * 
°rchr
(c⁄° *
s
, 
c
);

14 * 
°rföd
(c⁄° *
s
, 
c
);

16 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

18 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

19 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

20 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

22 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/types.h

1 #i‚de‡
JOS_INC_TYPES_H


2 
	#JOS_INC_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

9 
	tboﬁ
;

12 
__sig√d
 
	töt8_t
;

13 
	tuöt8_t
;

14 
	töt16_t
;

15 
	tuöt16_t
;

16 
	töt32_t
;

17 
	tuöt32_t
;

18 
	töt64_t
;

19 
	tuöt64_t
;

25 
öt32_t
 
	töçå_t
;

26 
uöt32_t
 
	tuöçå_t
;

27 
uöt32_t
 
	tphyßddr_t
;

30 
uöt32_t
 
	tµn_t
;

33 
uöt32_t
 
	tsize_t
;

36 
öt32_t
 
	tssize_t
;

39 
öt32_t
 
	toff_t
;

42 
	#MIN
(
_a
, 
_b
) \

44 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

45 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

46 
__a
 <
__b
 ? __a : __b; \

47 })

	)

48 
	#MAX
(
_a
, 
_b
) \

50 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

51 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

52 
__a
 >
__b
 ? __a : __b; \

53 })

	)

57 
	#ROUNDDOWN
(
a
, 
n
) \

59 
uöt32_t
 
__a
 = (uöt32_tË(
a
); \

60 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

61 })

	)

63 
	#ROUNDUP
(
a
, 
n
) \

65 
uöt32_t
 
__n
 = (uöt32_tË(
n
); \

66 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt32_t
Ë◊Ë+ 
__n
 - 1, __n)); \

67 })

	)

70 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

6 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

36 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

38 
__ölöe
 

39 
	$bªakpoöt
()

41 
__asm
 
	`__vﬁ©ûe
("int3");

42 
	}
}

44 
__ölöe
 
uöt8_t


45 
	$öb
(
p‹t
)

47 
uöt8_t
 
d©a
;

48 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

49  
d©a
;

50 
	}
}

52 
__ölöe
 

53 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

55 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

56 "=D" (
addr
), "=c" (
˙t
) :

57 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

59 
	}
}

61 
__ölöe
 
uöt16_t


62 
	$öw
(
p‹t
)

64 
uöt16_t
 
d©a
;

65 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

66  
d©a
;

67 
	}
}

69 
__ölöe
 

70 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

72 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

73 "=D" (
addr
), "=c" (
˙t
) :

74 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

76 
	}
}

78 
__ölöe
 
uöt32_t


79 
	$öl
(
p‹t
)

81 
uöt32_t
 
d©a
;

82 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

83  
d©a
;

84 
	}
}

86 
__ölöe
 

87 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

89 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

90 "=D" (
addr
), "=c" (
˙t
) :

91 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

93 
	}
}

95 
__ölöe
 

96 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

98 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

99 
	}
}

101 
__ölöe
 

102 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

104 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

105 "=S" (
addr
), "=c" (
˙t
) :

106 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

108 
	}
}

110 
__ölöe
 

111 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

113 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

114 
	}
}

116 
__ölöe
 

117 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

119 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

120 "=S" (
addr
), "=c" (
˙t
) :

121 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

123 
	}
}

125 
__ölöe
 

126 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

128 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

129 "=S" (
addr
), "=c" (
˙t
) :

130 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

132 
	}
}

134 
__ölöe
 

135 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

137 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

138 
	}
}

140 
__ölöe
 

141 
	$övÕg
(*
addr
)

143 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

144 
	}
}

146 
__ölöe
 

147 
	$lidt
(*
p
)

149 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

150 
	}
}

152 
__ölöe
 

153 
	$Œdt
(
uöt16_t
 
£l
)

155 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

156 
	}
}

158 
__ölöe
 

159 
	$…r
(
uöt16_t
 
£l
)

161 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

162 
	}
}

164 
__ölöe
 

165 
	$l¸0
(
uöt32_t
 
vÆ
)

167 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

168 
	}
}

170 
__ölöe
 
uöt32_t


171 
	$r¸0
()

173 
uöt32_t
 
vÆ
;

174 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

175  
vÆ
;

176 
	}
}

178 
__ölöe
 
uöt32_t


179 
	$r¸2
()

181 
uöt32_t
 
vÆ
;

182 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

183  
vÆ
;

184 
	}
}

186 
__ölöe
 

187 
	$l¸3
(
uöt32_t
 
vÆ
)

189 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

190 
	}
}

192 
__ölöe
 
uöt32_t


193 
	$r¸3
()

195 
uöt32_t
 
vÆ
;

196 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

197  
vÆ
;

198 
	}
}

200 
__ölöe
 

201 
	$l¸4
(
uöt32_t
 
vÆ
)

203 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

204 
	}
}

206 
__ölöe
 
uöt32_t


207 
	$r¸4
()

209 
uöt32_t
 
¸4
;

210 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

211  
¸4
;

212 
	}
}

214 
__ölöe
 

215 
	$ébÊush
()

217 
uöt32_t
 
¸3
;

218 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

219 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

220 
	}
}

222 
__ölöe
 
uöt32_t


223 
	$ªad_eÊags
()

225 
uöt32_t
 
eÊags
;

226 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

227  
eÊags
;

228 
	}
}

230 
__ölöe
 

231 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

233 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

234 
	}
}

236 
__ölöe
 
uöt32_t


237 
	$ªad_ebp
()

239 
uöt32_t
 
ebp
;

240 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

241  
ebp
;

242 
	}
}

244 
__ölöe
 
uöt32_t


245 
	$ªad_e•
()

247 
uöt32_t
 
e•
;

248 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

249  
e•
;

250 
	}
}

252 
__ölöe
 

253 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

255 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

256 
asm
 volatile("cpuid"

257 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

258 : "a" (
öfo
));

259 i‡(
óxp
)

260 *
óxp
 = 
óx
;

261 i‡(
ebxp
)

262 *
ebxp
 = 
ebx
;

263 i‡(
ecxp
)

264 *
ecxp
 = 
ecx
;

265 i‡(
edxp
)

266 *
edxp
 = 
edx
;

267 
	}
}

269 
__ölöe
 
uöt64_t


270 
	$ªad_tsc
()

272 
uöt64_t
 
tsc
;

273 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

274  
tsc
;

275 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/c⁄sﬁe.h
>

11 
c⁄s_öå
((*
¥oc
)());

12 
	`c⁄s_putc
(
c
);

16 
	$dñay
()

18 
	`öb
(0x84);

19 
	`öb
(0x84);

20 
	`öb
(0x84);

21 
	`öb
(0x84);

22 
	}
}

26 
	#COM1
 0x3F8

	)

28 
	#COM_RX
 0

29 
	#COM_TX
 0

30 
	#COM_DLL
 0

31 
	#COM_DLM
 1

32 
	#COM_IER
 1

33 
	#COM_IER_RDI
 0x01

34 
	#COM_IIR
 2

35 
	#COM_FCR
 2

36 
	#COM_LCR
 3

37 
	#COM_LCR_DLAB
 0x80

38 
	#COM_LCR_WLEN8
 0x03

39 
	#COM_MCR
 4

40 
	#COM_MCR_RTS
 0x02

41 
	#COM_MCR_DTR
 0x01

42 
	#COM_MCR_OUT2
 0x08

43 
	#COM_LSR
 5

44 
	#COM_LSR_DATA
 0x01

45 
	#COM_LSR_TXRDY
 0x20

46 
	#COM_LSR_TSRE
 0x40

47 

	)

48 
boﬁ
 
	g£rül_exi°s
;

51 
	$£rül_¥oc_d©a
()

53 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

55  
	`öb
(
COM1
+
COM_RX
);

56 
	}
}

59 
	$£rül_öå
()

61 i‡(
£rül_exi°s
)

62 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

63 
	}
}

66 
	$£rül_putc
(
c
)

68 
i
;

70 
i
 = 0;

71 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

72 
i
++)

73 
	`dñay
();

75 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

76 
	}
}

79 
	$£rül_öô
()

82 
	`outb
(
COM1
+
COM_FCR
, 0);

85 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

86 
	`outb
(
COM1
+
COM_DLL
, (
uöt8_t
) (115200 / 9600));

87 
	`outb
(
COM1
+
COM_DLM
, 0);

90 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

93 
	`outb
(
COM1
+
COM_MCR
, 0);

95 
	`outb
(
COM1
+
COM_IER
, 
COM_IER_RDI
);

99 
£rül_exi°s
 = (
	`öb
(
COM1
+
COM_LSR
) != 0xFF);

100 (Ë
	`öb
(
COM1
+
COM_IIR
);

101 (Ë
	`öb
(
COM1
+
COM_RX
);

103 
	}
}

112 
	$Õt_putc
(
c
)

114 
i
;

116 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

117 
	`dñay
();

118 
	`outb
(0x378+0, 
c
);

119 
	`outb
(0x378+2, 0x08|0x04|0x01);

120 
	`outb
(0x378+2, 0x08);

121 
	}
}

128 
	gaddr_6845
;

129 
uöt16_t
 *
	g¸t_buf
;

130 
uöt16_t
 
	g¸t_pos
;

133 
	$cga_öô
()

135 vﬁ©ûê
uöt16_t
 *
˝
;

136 
uöt16_t
 
was
;

137 
pos
;

139 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

140 
was
 = *
˝
;

141 *
˝
 = (
uöt16_t
) 0xA55A;

142 i‡(*
˝
 != 0xA55A) {

143 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

144 
addr_6845
 = 
MONO_BASE
;

146 *
˝
 = 
was
;

147 
addr_6845
 = 
CGA_BASE
;

151 
	`outb
(
addr_6845
, 14);

152 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

153 
	`outb
(
addr_6845
, 15);

154 
pos
 |
	`öb
(
addr_6845
 + 1);

156 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

157 
¸t_pos
 = 
pos
;

158 
	}
}

163 
	$cga_putc
(
c
)

166 i‡(!(
c
 & ~0xFF))

167 
c
 |= 0x0700;

169 
c
 & 0xff) {

171 i‡(
¸t_pos
 > 0) {

172 
¸t_pos
--;

173 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

177 
¸t_pos
 +
CRT_COLS
;

180 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

183 
	`c⁄s_putc
(' ');

184 
	`c⁄s_putc
(' ');

185 
	`c⁄s_putc
(' ');

186 
	`c⁄s_putc
(' ');

187 
	`c⁄s_putc
(' ');

190 
¸t_buf
[
¸t_pos
++] = 
c
;

195 i‡(
¸t_pos
 >
CRT_SIZE
) {

196 
i
;

198 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

199 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

200 
¸t_buf
[
i
] = 0x0700 | ' ';

201 
¸t_pos
 -
CRT_COLS
;

205 
	`outb
(
addr_6845
, 14);

206 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

207 
	`outb
(
addr_6845
, 15);

208 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

209 
	}
}

214 
	#NO
 0

	)

216 
	#SHIFT
 (1<<0)

	)

217 
	#CTL
 (1<<1)

	)

218 
	#ALT
 (1<<2)

	)

220 
	#CAPSLOCK
 (1<<3)

	)

221 
	#NUMLOCK
 (1<<4)

	)

222 
	#SCROLLLOCK
 (1<<5)

	)

224 
	#E0ESC
 (1<<6)

	)

226 
uöt8_t
 
	gshi·code
[256] =

228 [0x1D] = 
CTL
,

229 [0x2A] = 
SHIFT
,

230 [0x36] = 
SHIFT
,

231 [0x38] = 
ALT
,

232 [0x9D] = 
CTL
,

233 [0xB8] = 
ALT


236 
uöt8_t
 
	gtoggÀcode
[256] =

238 [0x3A] = 
CAPSLOCK
,

239 [0x45] = 
NUMLOCK
,

240 [0x46] = 
SCROLLLOCK


243 
uöt8_t
 
	gn‹mÆm≠
[256] =

245 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

248 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

250 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

251 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

252 
NO
, ' ', NO, NO, NO, NO, NO, NO,

253 
NO
, NO, NO, NO, NO, NO, NO, '7',

255 '2', '3', '0', '.', 
NO
, NO, NO, NO,

256 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

257 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

258 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

259 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

260 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

261 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


264 
uöt8_t
 
	gshi·m≠
[256] =

266 
NO
, 033, '!', '@', '#', '$', '%', '^',

269 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

271 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

272 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

273 
NO
, ' ', NO, NO, NO, NO, NO, NO,

274 
NO
, NO, NO, NO, NO, NO, NO, '7',

276 '2', '3', '0', '.', 
NO
, NO, NO, NO,

277 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

278 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

279 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

280 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

281 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

282 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


285 
	#C
(
x
Ë(x - '@')

	)

287 
uöt8_t
 
	g˘lm≠
[256] =

289 
NO
, NO, NO, NO, NO, NO, NO, NO,

290 
NO
, NO, NO, NO, NO, NO, NO, NO,

291 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

292 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

293 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

294 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

295 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

296 [0x97] = 
KEY_HOME
,

297 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

298 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

299 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

300 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

301 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


304 
uöt8_t
 *
	gch¨code
[4] = {

305 
n‹mÆm≠
,

306 
shi·m≠
,

307 
˘lm≠
,

308 
˘lm≠


316 
	$kbd_¥oc_d©a
()

318 
c
;

319 
uöt8_t
 
d©a
;

320 
uöt32_t
 
shi·
;

322 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

325 
d©a
 = 
	`öb
(
KBDATAP
);

327 i‡(
d©a
 == 0xE0) {

329 
shi·
 |
E0ESC
;

331 } i‡(
d©a
 & 0x80) {

333 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

334 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

336 } i‡(
shi·
 & 
E0ESC
) {

338 
d©a
 |= 0x80;

339 
shi·
 &~
E0ESC
;

342 
shi·
 |
shi·code
[
d©a
];

343 
shi·
 ^
toggÀcode
[
d©a
];

345 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

346 i‡(
shi·
 & 
CAPSLOCK
) {

347 i‡('a' <
c
 && c <= 'z')

348 
c
 += 'A' - 'a';

349 i‡('A' <
c
 && c <= 'Z')

350 
c
 += 'a' - 'A';

355 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

356 
	`˝rötf
("Rebooting!\n");

357 
	`outb
(0x92, 0x3);

360  
c
;

361 
	}
}

364 
	$kbd_öå
()

366 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

367 
	}
}

370 
	$kbd_öô
()

372 
	}
}

381 
	#CONSBUFSIZE
 512

	)

384 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

385 
uöt32_t
 
	mΩos
;

386 
uöt32_t
 
	mwpos
;

387 } 
	gc⁄s
;

392 
c⁄s_öå
((*
¥oc
)())

394 
c
;

396 (
c
 = (*
¥oc
)()) != -1) {

397 i‡(
c
 == 0)

399 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

400 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

401 
c⁄s
.
wpos
 = 0;

403 
	}
}

407 
	$c⁄s_gëc
()

409 
c
;

414 
	`£rül_öå
();

415 
	`kbd_öå
();

418 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

419 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

420 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

421 
c⁄s
.
Ωos
 = 0;

422  
c
;

425 
	}
}

429 
	$c⁄s_putc
(
c
)

431 
	`£rül_putc
(
c
);

432 
	`Õt_putc
(
c
);

433 
	`cga_putc
(
c
);

434 
	}
}

438 
	$c⁄s_öô
()

440 
	`cga_öô
();

441 
	`kbd_öô
();

442 
	`£rül_öô
();

444 i‡(!
£rül_exi°s
)

445 
	`˝rötf
("SerialÖort doesÇotÉxist!\n");

446 
	}
}

452 
	$˝utch¨
(
c
)

454 
	`c⁄s_putc
(
c
);

455 
	}
}

458 
	$gëch¨
()

460 
c
;

462 (
c
 = 
	`c⁄s_gëc
()) == 0)

464  
c
;

465 
	}
}

468 
	$isc⁄s
(
fdnum
)

472 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

16 
	#CRT_ROWS
 25

	)

17 
	#CRT_COLS
 80

	)

18 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

20 
c⁄s_öô
();

21 
c⁄s_gëc
();

23 
kbd_öå
();

24 
£rül_öå
();

	@kern/entrypgdir.c

1 
	~<öc/mmu.h
>

2 
	~<öc/memœyout.h
>

4 
±e_t
 
	gíåy_pgèbÀ
[
NPTENTRIES
];

20 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

21 
pde_t
 
íåy_pgdú
[
NPDENTRIES
] = {

24 ((
uöçå_t
)
íåy_pgèbÀ
 - 
KERNBASE
Ë+ 
PTE_P
,

26 [
KERNBASE
>>
PDXSHIFT
]

27 ((
uöçå_t
)
íåy_pgèbÀ
 - 
KERNBASE
Ë+ 
PTE_P
 + 
PTE_W


28 
	}
};

32 
__©åibuã__
((
	$__Æig√d__
(
PGSIZE
)))

33 
±e_t
 
íåy_pgèbÀ
[
NPTENTRIES
] = {

34 0x000000 | 
PTE_P
 | 
PTE_W
,

35 0x001000 | 
PTE_P
 | 
PTE_W
,

36 0x002000 | 
PTE_P
 | 
PTE_W
,

37 0x003000 | 
PTE_P
 | 
PTE_W
,

38 0x004000 | 
PTE_P
 | 
PTE_W
,

39 0x005000 | 
PTE_P
 | 
PTE_W
,

40 0x006000 | 
PTE_P
 | 
PTE_W
,

41 0x007000 | 
PTE_P
 | 
PTE_W
,

42 0x008000 | 
PTE_P
 | 
PTE_W
,

43 0x009000 | 
PTE_P
 | 
PTE_W
,

44 0x00a000 | 
PTE_P
 | 
PTE_W
,

45 0x00b000 | 
PTE_P
 | 
PTE_W
,

46 0x00c000 | 
PTE_P
 | 
PTE_W
,

47 0x00d000 | 
PTE_P
 | 
PTE_W
,

48 0x00e000 | 
PTE_P
 | 
PTE_W
,

49 0x00f000 | 
PTE_P
 | 
PTE_W
,

50 0x010000 | 
PTE_P
 | 
PTE_W
,

51 0x011000 | 
PTE_P
 | 
PTE_W
,

52 0x012000 | 
PTE_P
 | 
PTE_W
,

53 0x013000 | 
PTE_P
 | 
PTE_W
,

54 0x014000 | 
PTE_P
 | 
PTE_W
,

55 0x015000 | 
PTE_P
 | 
PTE_W
,

56 0x016000 | 
PTE_P
 | 
PTE_W
,

57 0x017000 | 
PTE_P
 | 
PTE_W
,

58 0x018000 | 
PTE_P
 | 
PTE_W
,

59 0x019000 | 
PTE_P
 | 
PTE_W
,

60 0x01a000 | 
PTE_P
 | 
PTE_W
,

61 0x01b000 | 
PTE_P
 | 
PTE_W
,

62 0x01c000 | 
PTE_P
 | 
PTE_W
,

63 0x01d000 | 
PTE_P
 | 
PTE_W
,

64 0x01e000 | 
PTE_P
 | 
PTE_W
,

65 0x01f000 | 
PTE_P
 | 
PTE_W
,

66 0x020000 | 
PTE_P
 | 
PTE_W
,

67 0x021000 | 
PTE_P
 | 
PTE_W
,

68 0x022000 | 
PTE_P
 | 
PTE_W
,

69 0x023000 | 
PTE_P
 | 
PTE_W
,

70 0x024000 | 
PTE_P
 | 
PTE_W
,

71 0x025000 | 
PTE_P
 | 
PTE_W
,

72 0x026000 | 
PTE_P
 | 
PTE_W
,

73 0x027000 | 
PTE_P
 | 
PTE_W
,

74 0x028000 | 
PTE_P
 | 
PTE_W
,

75 0x029000 | 
PTE_P
 | 
PTE_W
,

76 0x02a000 | 
PTE_P
 | 
PTE_W
,

77 0x02b000 | 
PTE_P
 | 
PTE_W
,

78 0x02c000 | 
PTE_P
 | 
PTE_W
,

79 0x02d000 | 
PTE_P
 | 
PTE_W
,

80 0x02e000 | 
PTE_P
 | 
PTE_W
,

81 0x02f000 | 
PTE_P
 | 
PTE_W
,

82 0x030000 | 
PTE_P
 | 
PTE_W
,

83 0x031000 | 
PTE_P
 | 
PTE_W
,

84 0x032000 | 
PTE_P
 | 
PTE_W
,

85 0x033000 | 
PTE_P
 | 
PTE_W
,

86 0x034000 | 
PTE_P
 | 
PTE_W
,

87 0x035000 | 
PTE_P
 | 
PTE_W
,

88 0x036000 | 
PTE_P
 | 
PTE_W
,

89 0x037000 | 
PTE_P
 | 
PTE_W
,

90 0x038000 | 
PTE_P
 | 
PTE_W
,

91 0x039000 | 
PTE_P
 | 
PTE_W
,

92 0x03a000 | 
PTE_P
 | 
PTE_W
,

93 0x03b000 | 
PTE_P
 | 
PTE_W
,

94 0x03c000 | 
PTE_P
 | 
PTE_W
,

95 0x03d000 | 
PTE_P
 | 
PTE_W
,

96 0x03e000 | 
PTE_P
 | 
PTE_W
,

97 0x03f000 | 
PTE_P
 | 
PTE_W
,

98 0x040000 | 
PTE_P
 | 
PTE_W
,

99 0x041000 | 
PTE_P
 | 
PTE_W
,

100 0x042000 | 
PTE_P
 | 
PTE_W
,

101 0x043000 | 
PTE_P
 | 
PTE_W
,

102 0x044000 | 
PTE_P
 | 
PTE_W
,

103 0x045000 | 
PTE_P
 | 
PTE_W
,

104 0x046000 | 
PTE_P
 | 
PTE_W
,

105 0x047000 | 
PTE_P
 | 
PTE_W
,

106 0x048000 | 
PTE_P
 | 
PTE_W
,

107 0x049000 | 
PTE_P
 | 
PTE_W
,

108 0x04a000 | 
PTE_P
 | 
PTE_W
,

109 0x04b000 | 
PTE_P
 | 
PTE_W
,

110 0x04c000 | 
PTE_P
 | 
PTE_W
,

111 0x04d000 | 
PTE_P
 | 
PTE_W
,

112 0x04e000 | 
PTE_P
 | 
PTE_W
,

113 0x04f000 | 
PTE_P
 | 
PTE_W
,

114 0x050000 | 
PTE_P
 | 
PTE_W
,

115 0x051000 | 
PTE_P
 | 
PTE_W
,

116 0x052000 | 
PTE_P
 | 
PTE_W
,

117 0x053000 | 
PTE_P
 | 
PTE_W
,

118 0x054000 | 
PTE_P
 | 
PTE_W
,

119 0x055000 | 
PTE_P
 | 
PTE_W
,

120 0x056000 | 
PTE_P
 | 
PTE_W
,

121 0x057000 | 
PTE_P
 | 
PTE_W
,

122 0x058000 | 
PTE_P
 | 
PTE_W
,

123 0x059000 | 
PTE_P
 | 
PTE_W
,

124 0x05a000 | 
PTE_P
 | 
PTE_W
,

125 0x05b000 | 
PTE_P
 | 
PTE_W
,

126 0x05c000 | 
PTE_P
 | 
PTE_W
,

127 0x05d000 | 
PTE_P
 | 
PTE_W
,

128 0x05e000 | 
PTE_P
 | 
PTE_W
,

129 0x05f000 | 
PTE_P
 | 
PTE_W
,

130 0x060000 | 
PTE_P
 | 
PTE_W
,

131 0x061000 | 
PTE_P
 | 
PTE_W
,

132 0x062000 | 
PTE_P
 | 
PTE_W
,

133 0x063000 | 
PTE_P
 | 
PTE_W
,

134 0x064000 | 
PTE_P
 | 
PTE_W
,

135 0x065000 | 
PTE_P
 | 
PTE_W
,

136 0x066000 | 
PTE_P
 | 
PTE_W
,

137 0x067000 | 
PTE_P
 | 
PTE_W
,

138 0x068000 | 
PTE_P
 | 
PTE_W
,

139 0x069000 | 
PTE_P
 | 
PTE_W
,

140 0x06a000 | 
PTE_P
 | 
PTE_W
,

141 0x06b000 | 
PTE_P
 | 
PTE_W
,

142 0x06c000 | 
PTE_P
 | 
PTE_W
,

143 0x06d000 | 
PTE_P
 | 
PTE_W
,

144 0x06e000 | 
PTE_P
 | 
PTE_W
,

145 0x06f000 | 
PTE_P
 | 
PTE_W
,

146 0x070000 | 
PTE_P
 | 
PTE_W
,

147 0x071000 | 
PTE_P
 | 
PTE_W
,

148 0x072000 | 
PTE_P
 | 
PTE_W
,

149 0x073000 | 
PTE_P
 | 
PTE_W
,

150 0x074000 | 
PTE_P
 | 
PTE_W
,

151 0x075000 | 
PTE_P
 | 
PTE_W
,

152 0x076000 | 
PTE_P
 | 
PTE_W
,

153 0x077000 | 
PTE_P
 | 
PTE_W
,

154 0x078000 | 
PTE_P
 | 
PTE_W
,

155 0x079000 | 
PTE_P
 | 
PTE_W
,

156 0x07a000 | 
PTE_P
 | 
PTE_W
,

157 0x07b000 | 
PTE_P
 | 
PTE_W
,

158 0x07c000 | 
PTE_P
 | 
PTE_W
,

159 0x07d000 | 
PTE_P
 | 
PTE_W
,

160 0x07e000 | 
PTE_P
 | 
PTE_W
,

161 0x07f000 | 
PTE_P
 | 
PTE_W
,

162 0x080000 | 
PTE_P
 | 
PTE_W
,

163 0x081000 | 
PTE_P
 | 
PTE_W
,

164 0x082000 | 
PTE_P
 | 
PTE_W
,

165 0x083000 | 
PTE_P
 | 
PTE_W
,

166 0x084000 | 
PTE_P
 | 
PTE_W
,

167 0x085000 | 
PTE_P
 | 
PTE_W
,

168 0x086000 | 
PTE_P
 | 
PTE_W
,

169 0x087000 | 
PTE_P
 | 
PTE_W
,

170 0x088000 | 
PTE_P
 | 
PTE_W
,

171 0x089000 | 
PTE_P
 | 
PTE_W
,

172 0x08a000 | 
PTE_P
 | 
PTE_W
,

173 0x08b000 | 
PTE_P
 | 
PTE_W
,

174 0x08c000 | 
PTE_P
 | 
PTE_W
,

175 0x08d000 | 
PTE_P
 | 
PTE_W
,

176 0x08e000 | 
PTE_P
 | 
PTE_W
,

177 0x08f000 | 
PTE_P
 | 
PTE_W
,

178 0x090000 | 
PTE_P
 | 
PTE_W
,

179 0x091000 | 
PTE_P
 | 
PTE_W
,

180 0x092000 | 
PTE_P
 | 
PTE_W
,

181 0x093000 | 
PTE_P
 | 
PTE_W
,

182 0x094000 | 
PTE_P
 | 
PTE_W
,

183 0x095000 | 
PTE_P
 | 
PTE_W
,

184 0x096000 | 
PTE_P
 | 
PTE_W
,

185 0x097000 | 
PTE_P
 | 
PTE_W
,

186 0x098000 | 
PTE_P
 | 
PTE_W
,

187 0x099000 | 
PTE_P
 | 
PTE_W
,

188 0x09a000 | 
PTE_P
 | 
PTE_W
,

189 0x09b000 | 
PTE_P
 | 
PTE_W
,

190 0x09c000 | 
PTE_P
 | 
PTE_W
,

191 0x09d000 | 
PTE_P
 | 
PTE_W
,

192 0x09e000 | 
PTE_P
 | 
PTE_W
,

193 0x09f000 | 
PTE_P
 | 
PTE_W
,

194 0x0a0000 | 
PTE_P
 | 
PTE_W
,

195 0x0a1000 | 
PTE_P
 | 
PTE_W
,

196 0x0a2000 | 
PTE_P
 | 
PTE_W
,

197 0x0a3000 | 
PTE_P
 | 
PTE_W
,

198 0x0a4000 | 
PTE_P
 | 
PTE_W
,

199 0x0a5000 | 
PTE_P
 | 
PTE_W
,

200 0x0a6000 | 
PTE_P
 | 
PTE_W
,

201 0x0a7000 | 
PTE_P
 | 
PTE_W
,

202 0x0a8000 | 
PTE_P
 | 
PTE_W
,

203 0x0a9000 | 
PTE_P
 | 
PTE_W
,

204 0x0Ø000 | 
PTE_P
 | 
PTE_W
,

205 0x0ab000 | 
PTE_P
 | 
PTE_W
,

206 0x0ac000 | 
PTE_P
 | 
PTE_W
,

207 0x0ad000 | 
PTE_P
 | 
PTE_W
,

208 0x0´000 | 
PTE_P
 | 
PTE_W
,

209 0x0af000 | 
PTE_P
 | 
PTE_W
,

210 0x0b0000 | 
PTE_P
 | 
PTE_W
,

211 0x0b1000 | 
PTE_P
 | 
PTE_W
,

212 0x0b2000 | 
PTE_P
 | 
PTE_W
,

213 0x0b3000 | 
PTE_P
 | 
PTE_W
,

214 0x0b4000 | 
PTE_P
 | 
PTE_W
,

215 0x0b5000 | 
PTE_P
 | 
PTE_W
,

216 0x0b6000 | 
PTE_P
 | 
PTE_W
,

217 0x0b7000 | 
PTE_P
 | 
PTE_W
,

218 0x0b8000 | 
PTE_P
 | 
PTE_W
,

219 0x0b9000 | 
PTE_P
 | 
PTE_W
,

220 0x0ba000 | 
PTE_P
 | 
PTE_W
,

221 0x0bb000 | 
PTE_P
 | 
PTE_W
,

222 0x0bc000 | 
PTE_P
 | 
PTE_W
,

223 0x0bd000 | 
PTE_P
 | 
PTE_W
,

224 0x0be000 | 
PTE_P
 | 
PTE_W
,

225 0x0bf000 | 
PTE_P
 | 
PTE_W
,

226 0x0c0000 | 
PTE_P
 | 
PTE_W
,

227 0x0c1000 | 
PTE_P
 | 
PTE_W
,

228 0x0c2000 | 
PTE_P
 | 
PTE_W
,

229 0x0c3000 | 
PTE_P
 | 
PTE_W
,

230 0x0c4000 | 
PTE_P
 | 
PTE_W
,

231 0x0c5000 | 
PTE_P
 | 
PTE_W
,

232 0x0c6000 | 
PTE_P
 | 
PTE_W
,

233 0x0c7000 | 
PTE_P
 | 
PTE_W
,

234 0x0c8000 | 
PTE_P
 | 
PTE_W
,

235 0x0c9000 | 
PTE_P
 | 
PTE_W
,

236 0x0ˇ000 | 
PTE_P
 | 
PTE_W
,

237 0x0cb000 | 
PTE_P
 | 
PTE_W
,

238 0x0cc000 | 
PTE_P
 | 
PTE_W
,

239 0x0cd000 | 
PTE_P
 | 
PTE_W
,

240 0x0˚000 | 
PTE_P
 | 
PTE_W
,

241 0x0cf000 | 
PTE_P
 | 
PTE_W
,

242 0x0d0000 | 
PTE_P
 | 
PTE_W
,

243 0x0d1000 | 
PTE_P
 | 
PTE_W
,

244 0x0d2000 | 
PTE_P
 | 
PTE_W
,

245 0x0d3000 | 
PTE_P
 | 
PTE_W
,

246 0x0d4000 | 
PTE_P
 | 
PTE_W
,

247 0x0d5000 | 
PTE_P
 | 
PTE_W
,

248 0x0d6000 | 
PTE_P
 | 
PTE_W
,

249 0x0d7000 | 
PTE_P
 | 
PTE_W
,

250 0x0d8000 | 
PTE_P
 | 
PTE_W
,

251 0x0d9000 | 
PTE_P
 | 
PTE_W
,

252 0x0da000 | 
PTE_P
 | 
PTE_W
,

253 0x0db000 | 
PTE_P
 | 
PTE_W
,

254 0x0dc000 | 
PTE_P
 | 
PTE_W
,

255 0x0dd000 | 
PTE_P
 | 
PTE_W
,

256 0x0de000 | 
PTE_P
 | 
PTE_W
,

257 0x0df000 | 
PTE_P
 | 
PTE_W
,

258 0x0e0000 | 
PTE_P
 | 
PTE_W
,

259 0x0e1000 | 
PTE_P
 | 
PTE_W
,

260 0x0e2000 | 
PTE_P
 | 
PTE_W
,

261 0x0e3000 | 
PTE_P
 | 
PTE_W
,

262 0x0e4000 | 
PTE_P
 | 
PTE_W
,

263 0x0e5000 | 
PTE_P
 | 
PTE_W
,

264 0x0e6000 | 
PTE_P
 | 
PTE_W
,

265 0x0e7000 | 
PTE_P
 | 
PTE_W
,

266 0x0e8000 | 
PTE_P
 | 
PTE_W
,

267 0x0e9000 | 
PTE_P
 | 
PTE_W
,

268 0x0ó000 | 
PTE_P
 | 
PTE_W
,

269 0x0eb000 | 
PTE_P
 | 
PTE_W
,

270 0x0ec000 | 
PTE_P
 | 
PTE_W
,

271 0x0ed000 | 
PTE_P
 | 
PTE_W
,

272 0x0ì000 | 
PTE_P
 | 
PTE_W
,

273 0x0ef000 | 
PTE_P
 | 
PTE_W
,

274 0x0f0000 | 
PTE_P
 | 
PTE_W
,

275 0x0f1000 | 
PTE_P
 | 
PTE_W
,

276 0x0f2000 | 
PTE_P
 | 
PTE_W
,

277 0x0f3000 | 
PTE_P
 | 
PTE_W
,

278 0x0f4000 | 
PTE_P
 | 
PTE_W
,

279 0x0f5000 | 
PTE_P
 | 
PTE_W
,

280 0x0f6000 | 
PTE_P
 | 
PTE_W
,

281 0x0f7000 | 
PTE_P
 | 
PTE_W
,

282 0x0f8000 | 
PTE_P
 | 
PTE_W
,

283 0x0f9000 | 
PTE_P
 | 
PTE_W
,

284 0x0Á000 | 
PTE_P
 | 
PTE_W
,

285 0x0fb000 | 
PTE_P
 | 
PTE_W
,

286 0x0fc000 | 
PTE_P
 | 
PTE_W
,

287 0x0fd000 | 
PTE_P
 | 
PTE_W
,

288 0x0„000 | 
PTE_P
 | 
PTE_W
,

289 0x0ff000 | 
PTE_P
 | 
PTE_W
,

290 0x100000 | 
PTE_P
 | 
PTE_W
,

291 0x101000 | 
PTE_P
 | 
PTE_W
,

292 0x102000 | 
PTE_P
 | 
PTE_W
,

293 0x103000 | 
PTE_P
 | 
PTE_W
,

294 0x104000 | 
PTE_P
 | 
PTE_W
,

295 0x105000 | 
PTE_P
 | 
PTE_W
,

296 0x106000 | 
PTE_P
 | 
PTE_W
,

297 0x107000 | 
PTE_P
 | 
PTE_W
,

298 0x108000 | 
PTE_P
 | 
PTE_W
,

299 0x109000 | 
PTE_P
 | 
PTE_W
,

300 0x10a000 | 
PTE_P
 | 
PTE_W
,

301 0x10b000 | 
PTE_P
 | 
PTE_W
,

302 0x10c000 | 
PTE_P
 | 
PTE_W
,

303 0x10d000 | 
PTE_P
 | 
PTE_W
,

304 0x10e000 | 
PTE_P
 | 
PTE_W
,

305 0x10f000 | 
PTE_P
 | 
PTE_W
,

306 0x110000 | 
PTE_P
 | 
PTE_W
,

307 0x111000 | 
PTE_P
 | 
PTE_W
,

308 0x112000 | 
PTE_P
 | 
PTE_W
,

309 0x113000 | 
PTE_P
 | 
PTE_W
,

310 0x114000 | 
PTE_P
 | 
PTE_W
,

311 0x115000 | 
PTE_P
 | 
PTE_W
,

312 0x116000 | 
PTE_P
 | 
PTE_W
,

313 0x117000 | 
PTE_P
 | 
PTE_W
,

314 0x118000 | 
PTE_P
 | 
PTE_W
,

315 0x119000 | 
PTE_P
 | 
PTE_W
,

316 0x11a000 | 
PTE_P
 | 
PTE_W
,

317 0x11b000 | 
PTE_P
 | 
PTE_W
,

318 0x11c000 | 
PTE_P
 | 
PTE_W
,

319 0x11d000 | 
PTE_P
 | 
PTE_W
,

320 0x11e000 | 
PTE_P
 | 
PTE_W
,

321 0x11f000 | 
PTE_P
 | 
PTE_W
,

322 0x120000 | 
PTE_P
 | 
PTE_W
,

323 0x121000 | 
PTE_P
 | 
PTE_W
,

324 0x122000 | 
PTE_P
 | 
PTE_W
,

325 0x123000 | 
PTE_P
 | 
PTE_W
,

326 0x124000 | 
PTE_P
 | 
PTE_W
,

327 0x125000 | 
PTE_P
 | 
PTE_W
,

328 0x126000 | 
PTE_P
 | 
PTE_W
,

329 0x127000 | 
PTE_P
 | 
PTE_W
,

330 0x128000 | 
PTE_P
 | 
PTE_W
,

331 0x129000 | 
PTE_P
 | 
PTE_W
,

332 0x12a000 | 
PTE_P
 | 
PTE_W
,

333 0x12b000 | 
PTE_P
 | 
PTE_W
,

334 0x12c000 | 
PTE_P
 | 
PTE_W
,

335 0x12d000 | 
PTE_P
 | 
PTE_W
,

336 0x12e000 | 
PTE_P
 | 
PTE_W
,

337 0x12f000 | 
PTE_P
 | 
PTE_W
,

338 0x130000 | 
PTE_P
 | 
PTE_W
,

339 0x131000 | 
PTE_P
 | 
PTE_W
,

340 0x132000 | 
PTE_P
 | 
PTE_W
,

341 0x133000 | 
PTE_P
 | 
PTE_W
,

342 0x134000 | 
PTE_P
 | 
PTE_W
,

343 0x135000 | 
PTE_P
 | 
PTE_W
,

344 0x136000 | 
PTE_P
 | 
PTE_W
,

345 0x137000 | 
PTE_P
 | 
PTE_W
,

346 0x138000 | 
PTE_P
 | 
PTE_W
,

347 0x139000 | 
PTE_P
 | 
PTE_W
,

348 0x13a000 | 
PTE_P
 | 
PTE_W
,

349 0x13b000 | 
PTE_P
 | 
PTE_W
,

350 0x13c000 | 
PTE_P
 | 
PTE_W
,

351 0x13d000 | 
PTE_P
 | 
PTE_W
,

352 0x13e000 | 
PTE_P
 | 
PTE_W
,

353 0x13f000 | 
PTE_P
 | 
PTE_W
,

354 0x140000 | 
PTE_P
 | 
PTE_W
,

355 0x141000 | 
PTE_P
 | 
PTE_W
,

356 0x142000 | 
PTE_P
 | 
PTE_W
,

357 0x143000 | 
PTE_P
 | 
PTE_W
,

358 0x144000 | 
PTE_P
 | 
PTE_W
,

359 0x145000 | 
PTE_P
 | 
PTE_W
,

360 0x146000 | 
PTE_P
 | 
PTE_W
,

361 0x147000 | 
PTE_P
 | 
PTE_W
,

362 0x148000 | 
PTE_P
 | 
PTE_W
,

363 0x149000 | 
PTE_P
 | 
PTE_W
,

364 0x14a000 | 
PTE_P
 | 
PTE_W
,

365 0x14b000 | 
PTE_P
 | 
PTE_W
,

366 0x14c000 | 
PTE_P
 | 
PTE_W
,

367 0x14d000 | 
PTE_P
 | 
PTE_W
,

368 0x14e000 | 
PTE_P
 | 
PTE_W
,

369 0x14f000 | 
PTE_P
 | 
PTE_W
,

370 0x150000 | 
PTE_P
 | 
PTE_W
,

371 0x151000 | 
PTE_P
 | 
PTE_W
,

372 0x152000 | 
PTE_P
 | 
PTE_W
,

373 0x153000 | 
PTE_P
 | 
PTE_W
,

374 0x154000 | 
PTE_P
 | 
PTE_W
,

375 0x155000 | 
PTE_P
 | 
PTE_W
,

376 0x156000 | 
PTE_P
 | 
PTE_W
,

377 0x157000 | 
PTE_P
 | 
PTE_W
,

378 0x158000 | 
PTE_P
 | 
PTE_W
,

379 0x159000 | 
PTE_P
 | 
PTE_W
,

380 0x15a000 | 
PTE_P
 | 
PTE_W
,

381 0x15b000 | 
PTE_P
 | 
PTE_W
,

382 0x15c000 | 
PTE_P
 | 
PTE_W
,

383 0x15d000 | 
PTE_P
 | 
PTE_W
,

384 0x15e000 | 
PTE_P
 | 
PTE_W
,

385 0x15f000 | 
PTE_P
 | 
PTE_W
,

386 0x160000 | 
PTE_P
 | 
PTE_W
,

387 0x161000 | 
PTE_P
 | 
PTE_W
,

388 0x162000 | 
PTE_P
 | 
PTE_W
,

389 0x163000 | 
PTE_P
 | 
PTE_W
,

390 0x164000 | 
PTE_P
 | 
PTE_W
,

391 0x165000 | 
PTE_P
 | 
PTE_W
,

392 0x166000 | 
PTE_P
 | 
PTE_W
,

393 0x167000 | 
PTE_P
 | 
PTE_W
,

394 0x168000 | 
PTE_P
 | 
PTE_W
,

395 0x169000 | 
PTE_P
 | 
PTE_W
,

396 0x16a000 | 
PTE_P
 | 
PTE_W
,

397 0x16b000 | 
PTE_P
 | 
PTE_W
,

398 0x16c000 | 
PTE_P
 | 
PTE_W
,

399 0x16d000 | 
PTE_P
 | 
PTE_W
,

400 0x16e000 | 
PTE_P
 | 
PTE_W
,

401 0x16f000 | 
PTE_P
 | 
PTE_W
,

402 0x170000 | 
PTE_P
 | 
PTE_W
,

403 0x171000 | 
PTE_P
 | 
PTE_W
,

404 0x172000 | 
PTE_P
 | 
PTE_W
,

405 0x173000 | 
PTE_P
 | 
PTE_W
,

406 0x174000 | 
PTE_P
 | 
PTE_W
,

407 0x175000 | 
PTE_P
 | 
PTE_W
,

408 0x176000 | 
PTE_P
 | 
PTE_W
,

409 0x177000 | 
PTE_P
 | 
PTE_W
,

410 0x178000 | 
PTE_P
 | 
PTE_W
,

411 0x179000 | 
PTE_P
 | 
PTE_W
,

412 0x17a000 | 
PTE_P
 | 
PTE_W
,

413 0x17b000 | 
PTE_P
 | 
PTE_W
,

414 0x17c000 | 
PTE_P
 | 
PTE_W
,

415 0x17d000 | 
PTE_P
 | 
PTE_W
,

416 0x17e000 | 
PTE_P
 | 
PTE_W
,

417 0x17f000 | 
PTE_P
 | 
PTE_W
,

418 0x180000 | 
PTE_P
 | 
PTE_W
,

419 0x181000 | 
PTE_P
 | 
PTE_W
,

420 0x182000 | 
PTE_P
 | 
PTE_W
,

421 0x183000 | 
PTE_P
 | 
PTE_W
,

422 0x184000 | 
PTE_P
 | 
PTE_W
,

423 0x185000 | 
PTE_P
 | 
PTE_W
,

424 0x186000 | 
PTE_P
 | 
PTE_W
,

425 0x187000 | 
PTE_P
 | 
PTE_W
,

426 0x188000 | 
PTE_P
 | 
PTE_W
,

427 0x189000 | 
PTE_P
 | 
PTE_W
,

428 0x18a000 | 
PTE_P
 | 
PTE_W
,

429 0x18b000 | 
PTE_P
 | 
PTE_W
,

430 0x18c000 | 
PTE_P
 | 
PTE_W
,

431 0x18d000 | 
PTE_P
 | 
PTE_W
,

432 0x18e000 | 
PTE_P
 | 
PTE_W
,

433 0x18f000 | 
PTE_P
 | 
PTE_W
,

434 0x190000 | 
PTE_P
 | 
PTE_W
,

435 0x191000 | 
PTE_P
 | 
PTE_W
,

436 0x192000 | 
PTE_P
 | 
PTE_W
,

437 0x193000 | 
PTE_P
 | 
PTE_W
,

438 0x194000 | 
PTE_P
 | 
PTE_W
,

439 0x195000 | 
PTE_P
 | 
PTE_W
,

440 0x196000 | 
PTE_P
 | 
PTE_W
,

441 0x197000 | 
PTE_P
 | 
PTE_W
,

442 0x198000 | 
PTE_P
 | 
PTE_W
,

443 0x199000 | 
PTE_P
 | 
PTE_W
,

444 0x19a000 | 
PTE_P
 | 
PTE_W
,

445 0x19b000 | 
PTE_P
 | 
PTE_W
,

446 0x19c000 | 
PTE_P
 | 
PTE_W
,

447 0x19d000 | 
PTE_P
 | 
PTE_W
,

448 0x19e000 | 
PTE_P
 | 
PTE_W
,

449 0x19f000 | 
PTE_P
 | 
PTE_W
,

450 0x1a0000 | 
PTE_P
 | 
PTE_W
,

451 0x1a1000 | 
PTE_P
 | 
PTE_W
,

452 0x1a2000 | 
PTE_P
 | 
PTE_W
,

453 0x1a3000 | 
PTE_P
 | 
PTE_W
,

454 0x1a4000 | 
PTE_P
 | 
PTE_W
,

455 0x1a5000 | 
PTE_P
 | 
PTE_W
,

456 0x1a6000 | 
PTE_P
 | 
PTE_W
,

457 0x1a7000 | 
PTE_P
 | 
PTE_W
,

458 0x1a8000 | 
PTE_P
 | 
PTE_W
,

459 0x1a9000 | 
PTE_P
 | 
PTE_W
,

460 0x1Ø000 | 
PTE_P
 | 
PTE_W
,

461 0x1ab000 | 
PTE_P
 | 
PTE_W
,

462 0x1ac000 | 
PTE_P
 | 
PTE_W
,

463 0x1ad000 | 
PTE_P
 | 
PTE_W
,

464 0x1´000 | 
PTE_P
 | 
PTE_W
,

465 0x1af000 | 
PTE_P
 | 
PTE_W
,

466 0x1b0000 | 
PTE_P
 | 
PTE_W
,

467 0x1b1000 | 
PTE_P
 | 
PTE_W
,

468 0x1b2000 | 
PTE_P
 | 
PTE_W
,

469 0x1b3000 | 
PTE_P
 | 
PTE_W
,

470 0x1b4000 | 
PTE_P
 | 
PTE_W
,

471 0x1b5000 | 
PTE_P
 | 
PTE_W
,

472 0x1b6000 | 
PTE_P
 | 
PTE_W
,

473 0x1b7000 | 
PTE_P
 | 
PTE_W
,

474 0x1b8000 | 
PTE_P
 | 
PTE_W
,

475 0x1b9000 | 
PTE_P
 | 
PTE_W
,

476 0x1ba000 | 
PTE_P
 | 
PTE_W
,

477 0x1bb000 | 
PTE_P
 | 
PTE_W
,

478 0x1bc000 | 
PTE_P
 | 
PTE_W
,

479 0x1bd000 | 
PTE_P
 | 
PTE_W
,

480 0x1be000 | 
PTE_P
 | 
PTE_W
,

481 0x1bf000 | 
PTE_P
 | 
PTE_W
,

482 0x1c0000 | 
PTE_P
 | 
PTE_W
,

483 0x1c1000 | 
PTE_P
 | 
PTE_W
,

484 0x1c2000 | 
PTE_P
 | 
PTE_W
,

485 0x1c3000 | 
PTE_P
 | 
PTE_W
,

486 0x1c4000 | 
PTE_P
 | 
PTE_W
,

487 0x1c5000 | 
PTE_P
 | 
PTE_W
,

488 0x1c6000 | 
PTE_P
 | 
PTE_W
,

489 0x1c7000 | 
PTE_P
 | 
PTE_W
,

490 0x1c8000 | 
PTE_P
 | 
PTE_W
,

491 0x1c9000 | 
PTE_P
 | 
PTE_W
,

492 0x1ˇ000 | 
PTE_P
 | 
PTE_W
,

493 0x1cb000 | 
PTE_P
 | 
PTE_W
,

494 0x1cc000 | 
PTE_P
 | 
PTE_W
,

495 0x1cd000 | 
PTE_P
 | 
PTE_W
,

496 0x1˚000 | 
PTE_P
 | 
PTE_W
,

497 0x1cf000 | 
PTE_P
 | 
PTE_W
,

498 0x1d0000 | 
PTE_P
 | 
PTE_W
,

499 0x1d1000 | 
PTE_P
 | 
PTE_W
,

500 0x1d2000 | 
PTE_P
 | 
PTE_W
,

501 0x1d3000 | 
PTE_P
 | 
PTE_W
,

502 0x1d4000 | 
PTE_P
 | 
PTE_W
,

503 0x1d5000 | 
PTE_P
 | 
PTE_W
,

504 0x1d6000 | 
PTE_P
 | 
PTE_W
,

505 0x1d7000 | 
PTE_P
 | 
PTE_W
,

506 0x1d8000 | 
PTE_P
 | 
PTE_W
,

507 0x1d9000 | 
PTE_P
 | 
PTE_W
,

508 0x1da000 | 
PTE_P
 | 
PTE_W
,

509 0x1db000 | 
PTE_P
 | 
PTE_W
,

510 0x1dc000 | 
PTE_P
 | 
PTE_W
,

511 0x1dd000 | 
PTE_P
 | 
PTE_W
,

512 0x1de000 | 
PTE_P
 | 
PTE_W
,

513 0x1df000 | 
PTE_P
 | 
PTE_W
,

514 0x1e0000 | 
PTE_P
 | 
PTE_W
,

515 0x1e1000 | 
PTE_P
 | 
PTE_W
,

516 0x1e2000 | 
PTE_P
 | 
PTE_W
,

517 0x1e3000 | 
PTE_P
 | 
PTE_W
,

518 0x1e4000 | 
PTE_P
 | 
PTE_W
,

519 0x1e5000 | 
PTE_P
 | 
PTE_W
,

520 0x1e6000 | 
PTE_P
 | 
PTE_W
,

521 0x1e7000 | 
PTE_P
 | 
PTE_W
,

522 0x1e8000 | 
PTE_P
 | 
PTE_W
,

523 0x1e9000 | 
PTE_P
 | 
PTE_W
,

524 0x1ó000 | 
PTE_P
 | 
PTE_W
,

525 0x1eb000 | 
PTE_P
 | 
PTE_W
,

526 0x1ec000 | 
PTE_P
 | 
PTE_W
,

527 0x1ed000 | 
PTE_P
 | 
PTE_W
,

528 0x1ì000 | 
PTE_P
 | 
PTE_W
,

529 0x1ef000 | 
PTE_P
 | 
PTE_W
,

530 0x1f0000 | 
PTE_P
 | 
PTE_W
,

531 0x1f1000 | 
PTE_P
 | 
PTE_W
,

532 0x1f2000 | 
PTE_P
 | 
PTE_W
,

533 0x1f3000 | 
PTE_P
 | 
PTE_W
,

534 0x1f4000 | 
PTE_P
 | 
PTE_W
,

535 0x1f5000 | 
PTE_P
 | 
PTE_W
,

536 0x1f6000 | 
PTE_P
 | 
PTE_W
,

537 0x1f7000 | 
PTE_P
 | 
PTE_W
,

538 0x1f8000 | 
PTE_P
 | 
PTE_W
,

539 0x1f9000 | 
PTE_P
 | 
PTE_W
,

540 0x1Á000 | 
PTE_P
 | 
PTE_W
,

541 0x1fb000 | 
PTE_P
 | 
PTE_W
,

542 0x1fc000 | 
PTE_P
 | 
PTE_W
,

543 0x1fd000 | 
PTE_P
 | 
PTE_W
,

544 0x1„000 | 
PTE_P
 | 
PTE_W
,

545 0x1ff000 | 
PTE_P
 | 
PTE_W
,

546 0x200000 | 
PTE_P
 | 
PTE_W
,

547 0x201000 | 
PTE_P
 | 
PTE_W
,

548 0x202000 | 
PTE_P
 | 
PTE_W
,

549 0x203000 | 
PTE_P
 | 
PTE_W
,

550 0x204000 | 
PTE_P
 | 
PTE_W
,

551 0x205000 | 
PTE_P
 | 
PTE_W
,

552 0x206000 | 
PTE_P
 | 
PTE_W
,

553 0x207000 | 
PTE_P
 | 
PTE_W
,

554 0x208000 | 
PTE_P
 | 
PTE_W
,

555 0x209000 | 
PTE_P
 | 
PTE_W
,

556 0x20a000 | 
PTE_P
 | 
PTE_W
,

557 0x20b000 | 
PTE_P
 | 
PTE_W
,

558 0x20c000 | 
PTE_P
 | 
PTE_W
,

559 0x20d000 | 
PTE_P
 | 
PTE_W
,

560 0x20e000 | 
PTE_P
 | 
PTE_W
,

561 0x20f000 | 
PTE_P
 | 
PTE_W
,

562 0x210000 | 
PTE_P
 | 
PTE_W
,

563 0x211000 | 
PTE_P
 | 
PTE_W
,

564 0x212000 | 
PTE_P
 | 
PTE_W
,

565 0x213000 | 
PTE_P
 | 
PTE_W
,

566 0x214000 | 
PTE_P
 | 
PTE_W
,

567 0x215000 | 
PTE_P
 | 
PTE_W
,

568 0x216000 | 
PTE_P
 | 
PTE_W
,

569 0x217000 | 
PTE_P
 | 
PTE_W
,

570 0x218000 | 
PTE_P
 | 
PTE_W
,

571 0x219000 | 
PTE_P
 | 
PTE_W
,

572 0x21a000 | 
PTE_P
 | 
PTE_W
,

573 0x21b000 | 
PTE_P
 | 
PTE_W
,

574 0x21c000 | 
PTE_P
 | 
PTE_W
,

575 0x21d000 | 
PTE_P
 | 
PTE_W
,

576 0x21e000 | 
PTE_P
 | 
PTE_W
,

577 0x21f000 | 
PTE_P
 | 
PTE_W
,

578 0x220000 | 
PTE_P
 | 
PTE_W
,

579 0x221000 | 
PTE_P
 | 
PTE_W
,

580 0x222000 | 
PTE_P
 | 
PTE_W
,

581 0x223000 | 
PTE_P
 | 
PTE_W
,

582 0x224000 | 
PTE_P
 | 
PTE_W
,

583 0x225000 | 
PTE_P
 | 
PTE_W
,

584 0x226000 | 
PTE_P
 | 
PTE_W
,

585 0x227000 | 
PTE_P
 | 
PTE_W
,

586 0x228000 | 
PTE_P
 | 
PTE_W
,

587 0x229000 | 
PTE_P
 | 
PTE_W
,

588 0x22a000 | 
PTE_P
 | 
PTE_W
,

589 0x22b000 | 
PTE_P
 | 
PTE_W
,

590 0x22c000 | 
PTE_P
 | 
PTE_W
,

591 0x22d000 | 
PTE_P
 | 
PTE_W
,

592 0x22e000 | 
PTE_P
 | 
PTE_W
,

593 0x22f000 | 
PTE_P
 | 
PTE_W
,

594 0x230000 | 
PTE_P
 | 
PTE_W
,

595 0x231000 | 
PTE_P
 | 
PTE_W
,

596 0x232000 | 
PTE_P
 | 
PTE_W
,

597 0x233000 | 
PTE_P
 | 
PTE_W
,

598 0x234000 | 
PTE_P
 | 
PTE_W
,

599 0x235000 | 
PTE_P
 | 
PTE_W
,

600 0x236000 | 
PTE_P
 | 
PTE_W
,

601 0x237000 | 
PTE_P
 | 
PTE_W
,

602 0x238000 | 
PTE_P
 | 
PTE_W
,

603 0x239000 | 
PTE_P
 | 
PTE_W
,

604 0x23a000 | 
PTE_P
 | 
PTE_W
,

605 0x23b000 | 
PTE_P
 | 
PTE_W
,

606 0x23c000 | 
PTE_P
 | 
PTE_W
,

607 0x23d000 | 
PTE_P
 | 
PTE_W
,

608 0x23e000 | 
PTE_P
 | 
PTE_W
,

609 0x23f000 | 
PTE_P
 | 
PTE_W
,

610 0x240000 | 
PTE_P
 | 
PTE_W
,

611 0x241000 | 
PTE_P
 | 
PTE_W
,

612 0x242000 | 
PTE_P
 | 
PTE_W
,

613 0x243000 | 
PTE_P
 | 
PTE_W
,

614 0x244000 | 
PTE_P
 | 
PTE_W
,

615 0x245000 | 
PTE_P
 | 
PTE_W
,

616 0x246000 | 
PTE_P
 | 
PTE_W
,

617 0x247000 | 
PTE_P
 | 
PTE_W
,

618 0x248000 | 
PTE_P
 | 
PTE_W
,

619 0x249000 | 
PTE_P
 | 
PTE_W
,

620 0x24a000 | 
PTE_P
 | 
PTE_W
,

621 0x24b000 | 
PTE_P
 | 
PTE_W
,

622 0x24c000 | 
PTE_P
 | 
PTE_W
,

623 0x24d000 | 
PTE_P
 | 
PTE_W
,

624 0x24e000 | 
PTE_P
 | 
PTE_W
,

625 0x24f000 | 
PTE_P
 | 
PTE_W
,

626 0x250000 | 
PTE_P
 | 
PTE_W
,

627 0x251000 | 
PTE_P
 | 
PTE_W
,

628 0x252000 | 
PTE_P
 | 
PTE_W
,

629 0x253000 | 
PTE_P
 | 
PTE_W
,

630 0x254000 | 
PTE_P
 | 
PTE_W
,

631 0x255000 | 
PTE_P
 | 
PTE_W
,

632 0x256000 | 
PTE_P
 | 
PTE_W
,

633 0x257000 | 
PTE_P
 | 
PTE_W
,

634 0x258000 | 
PTE_P
 | 
PTE_W
,

635 0x259000 | 
PTE_P
 | 
PTE_W
,

636 0x25a000 | 
PTE_P
 | 
PTE_W
,

637 0x25b000 | 
PTE_P
 | 
PTE_W
,

638 0x25c000 | 
PTE_P
 | 
PTE_W
,

639 0x25d000 | 
PTE_P
 | 
PTE_W
,

640 0x25e000 | 
PTE_P
 | 
PTE_W
,

641 0x25f000 | 
PTE_P
 | 
PTE_W
,

642 0x260000 | 
PTE_P
 | 
PTE_W
,

643 0x261000 | 
PTE_P
 | 
PTE_W
,

644 0x262000 | 
PTE_P
 | 
PTE_W
,

645 0x263000 | 
PTE_P
 | 
PTE_W
,

646 0x264000 | 
PTE_P
 | 
PTE_W
,

647 0x265000 | 
PTE_P
 | 
PTE_W
,

648 0x266000 | 
PTE_P
 | 
PTE_W
,

649 0x267000 | 
PTE_P
 | 
PTE_W
,

650 0x268000 | 
PTE_P
 | 
PTE_W
,

651 0x269000 | 
PTE_P
 | 
PTE_W
,

652 0x26a000 | 
PTE_P
 | 
PTE_W
,

653 0x26b000 | 
PTE_P
 | 
PTE_W
,

654 0x26c000 | 
PTE_P
 | 
PTE_W
,

655 0x26d000 | 
PTE_P
 | 
PTE_W
,

656 0x26e000 | 
PTE_P
 | 
PTE_W
,

657 0x26f000 | 
PTE_P
 | 
PTE_W
,

658 0x270000 | 
PTE_P
 | 
PTE_W
,

659 0x271000 | 
PTE_P
 | 
PTE_W
,

660 0x272000 | 
PTE_P
 | 
PTE_W
,

661 0x273000 | 
PTE_P
 | 
PTE_W
,

662 0x274000 | 
PTE_P
 | 
PTE_W
,

663 0x275000 | 
PTE_P
 | 
PTE_W
,

664 0x276000 | 
PTE_P
 | 
PTE_W
,

665 0x277000 | 
PTE_P
 | 
PTE_W
,

666 0x278000 | 
PTE_P
 | 
PTE_W
,

667 0x279000 | 
PTE_P
 | 
PTE_W
,

668 0x27a000 | 
PTE_P
 | 
PTE_W
,

669 0x27b000 | 
PTE_P
 | 
PTE_W
,

670 0x27c000 | 
PTE_P
 | 
PTE_W
,

671 0x27d000 | 
PTE_P
 | 
PTE_W
,

672 0x27e000 | 
PTE_P
 | 
PTE_W
,

673 0x27f000 | 
PTE_P
 | 
PTE_W
,

674 0x280000 | 
PTE_P
 | 
PTE_W
,

675 0x281000 | 
PTE_P
 | 
PTE_W
,

676 0x282000 | 
PTE_P
 | 
PTE_W
,

677 0x283000 | 
PTE_P
 | 
PTE_W
,

678 0x284000 | 
PTE_P
 | 
PTE_W
,

679 0x285000 | 
PTE_P
 | 
PTE_W
,

680 0x286000 | 
PTE_P
 | 
PTE_W
,

681 0x287000 | 
PTE_P
 | 
PTE_W
,

682 0x288000 | 
PTE_P
 | 
PTE_W
,

683 0x289000 | 
PTE_P
 | 
PTE_W
,

684 0x28a000 | 
PTE_P
 | 
PTE_W
,

685 0x28b000 | 
PTE_P
 | 
PTE_W
,

686 0x28c000 | 
PTE_P
 | 
PTE_W
,

687 0x28d000 | 
PTE_P
 | 
PTE_W
,

688 0x28e000 | 
PTE_P
 | 
PTE_W
,

689 0x28f000 | 
PTE_P
 | 
PTE_W
,

690 0x290000 | 
PTE_P
 | 
PTE_W
,

691 0x291000 | 
PTE_P
 | 
PTE_W
,

692 0x292000 | 
PTE_P
 | 
PTE_W
,

693 0x293000 | 
PTE_P
 | 
PTE_W
,

694 0x294000 | 
PTE_P
 | 
PTE_W
,

695 0x295000 | 
PTE_P
 | 
PTE_W
,

696 0x296000 | 
PTE_P
 | 
PTE_W
,

697 0x297000 | 
PTE_P
 | 
PTE_W
,

698 0x298000 | 
PTE_P
 | 
PTE_W
,

699 0x299000 | 
PTE_P
 | 
PTE_W
,

700 0x29a000 | 
PTE_P
 | 
PTE_W
,

701 0x29b000 | 
PTE_P
 | 
PTE_W
,

702 0x29c000 | 
PTE_P
 | 
PTE_W
,

703 0x29d000 | 
PTE_P
 | 
PTE_W
,

704 0x29e000 | 
PTE_P
 | 
PTE_W
,

705 0x29f000 | 
PTE_P
 | 
PTE_W
,

706 0x2a0000 | 
PTE_P
 | 
PTE_W
,

707 0x2a1000 | 
PTE_P
 | 
PTE_W
,

708 0x2a2000 | 
PTE_P
 | 
PTE_W
,

709 0x2a3000 | 
PTE_P
 | 
PTE_W
,

710 0x2a4000 | 
PTE_P
 | 
PTE_W
,

711 0x2a5000 | 
PTE_P
 | 
PTE_W
,

712 0x2a6000 | 
PTE_P
 | 
PTE_W
,

713 0x2a7000 | 
PTE_P
 | 
PTE_W
,

714 0x2a8000 | 
PTE_P
 | 
PTE_W
,

715 0x2a9000 | 
PTE_P
 | 
PTE_W
,

716 0x2Ø000 | 
PTE_P
 | 
PTE_W
,

717 0x2ab000 | 
PTE_P
 | 
PTE_W
,

718 0x2ac000 | 
PTE_P
 | 
PTE_W
,

719 0x2ad000 | 
PTE_P
 | 
PTE_W
,

720 0x2´000 | 
PTE_P
 | 
PTE_W
,

721 0x2af000 | 
PTE_P
 | 
PTE_W
,

722 0x2b0000 | 
PTE_P
 | 
PTE_W
,

723 0x2b1000 | 
PTE_P
 | 
PTE_W
,

724 0x2b2000 | 
PTE_P
 | 
PTE_W
,

725 0x2b3000 | 
PTE_P
 | 
PTE_W
,

726 0x2b4000 | 
PTE_P
 | 
PTE_W
,

727 0x2b5000 | 
PTE_P
 | 
PTE_W
,

728 0x2b6000 | 
PTE_P
 | 
PTE_W
,

729 0x2b7000 | 
PTE_P
 | 
PTE_W
,

730 0x2b8000 | 
PTE_P
 | 
PTE_W
,

731 0x2b9000 | 
PTE_P
 | 
PTE_W
,

732 0x2ba000 | 
PTE_P
 | 
PTE_W
,

733 0x2bb000 | 
PTE_P
 | 
PTE_W
,

734 0x2bc000 | 
PTE_P
 | 
PTE_W
,

735 0x2bd000 | 
PTE_P
 | 
PTE_W
,

736 0x2be000 | 
PTE_P
 | 
PTE_W
,

737 0x2bf000 | 
PTE_P
 | 
PTE_W
,

738 0x2c0000 | 
PTE_P
 | 
PTE_W
,

739 0x2c1000 | 
PTE_P
 | 
PTE_W
,

740 0x2c2000 | 
PTE_P
 | 
PTE_W
,

741 0x2c3000 | 
PTE_P
 | 
PTE_W
,

742 0x2c4000 | 
PTE_P
 | 
PTE_W
,

743 0x2c5000 | 
PTE_P
 | 
PTE_W
,

744 0x2c6000 | 
PTE_P
 | 
PTE_W
,

745 0x2c7000 | 
PTE_P
 | 
PTE_W
,

746 0x2c8000 | 
PTE_P
 | 
PTE_W
,

747 0x2c9000 | 
PTE_P
 | 
PTE_W
,

748 0x2ˇ000 | 
PTE_P
 | 
PTE_W
,

749 0x2cb000 | 
PTE_P
 | 
PTE_W
,

750 0x2cc000 | 
PTE_P
 | 
PTE_W
,

751 0x2cd000 | 
PTE_P
 | 
PTE_W
,

752 0x2˚000 | 
PTE_P
 | 
PTE_W
,

753 0x2cf000 | 
PTE_P
 | 
PTE_W
,

754 0x2d0000 | 
PTE_P
 | 
PTE_W
,

755 0x2d1000 | 
PTE_P
 | 
PTE_W
,

756 0x2d2000 | 
PTE_P
 | 
PTE_W
,

757 0x2d3000 | 
PTE_P
 | 
PTE_W
,

758 0x2d4000 | 
PTE_P
 | 
PTE_W
,

759 0x2d5000 | 
PTE_P
 | 
PTE_W
,

760 0x2d6000 | 
PTE_P
 | 
PTE_W
,

761 0x2d7000 | 
PTE_P
 | 
PTE_W
,

762 0x2d8000 | 
PTE_P
 | 
PTE_W
,

763 0x2d9000 | 
PTE_P
 | 
PTE_W
,

764 0x2da000 | 
PTE_P
 | 
PTE_W
,

765 0x2db000 | 
PTE_P
 | 
PTE_W
,

766 0x2dc000 | 
PTE_P
 | 
PTE_W
,

767 0x2dd000 | 
PTE_P
 | 
PTE_W
,

768 0x2de000 | 
PTE_P
 | 
PTE_W
,

769 0x2df000 | 
PTE_P
 | 
PTE_W
,

770 0x2e0000 | 
PTE_P
 | 
PTE_W
,

771 0x2e1000 | 
PTE_P
 | 
PTE_W
,

772 0x2e2000 | 
PTE_P
 | 
PTE_W
,

773 0x2e3000 | 
PTE_P
 | 
PTE_W
,

774 0x2e4000 | 
PTE_P
 | 
PTE_W
,

775 0x2e5000 | 
PTE_P
 | 
PTE_W
,

776 0x2e6000 | 
PTE_P
 | 
PTE_W
,

777 0x2e7000 | 
PTE_P
 | 
PTE_W
,

778 0x2e8000 | 
PTE_P
 | 
PTE_W
,

779 0x2e9000 | 
PTE_P
 | 
PTE_W
,

780 0x2ó000 | 
PTE_P
 | 
PTE_W
,

781 0x2eb000 | 
PTE_P
 | 
PTE_W
,

782 0x2ec000 | 
PTE_P
 | 
PTE_W
,

783 0x2ed000 | 
PTE_P
 | 
PTE_W
,

784 0x2ì000 | 
PTE_P
 | 
PTE_W
,

785 0x2ef000 | 
PTE_P
 | 
PTE_W
,

786 0x2f0000 | 
PTE_P
 | 
PTE_W
,

787 0x2f1000 | 
PTE_P
 | 
PTE_W
,

788 0x2f2000 | 
PTE_P
 | 
PTE_W
,

789 0x2f3000 | 
PTE_P
 | 
PTE_W
,

790 0x2f4000 | 
PTE_P
 | 
PTE_W
,

791 0x2f5000 | 
PTE_P
 | 
PTE_W
,

792 0x2f6000 | 
PTE_P
 | 
PTE_W
,

793 0x2f7000 | 
PTE_P
 | 
PTE_W
,

794 0x2f8000 | 
PTE_P
 | 
PTE_W
,

795 0x2f9000 | 
PTE_P
 | 
PTE_W
,

796 0x2Á000 | 
PTE_P
 | 
PTE_W
,

797 0x2fb000 | 
PTE_P
 | 
PTE_W
,

798 0x2fc000 | 
PTE_P
 | 
PTE_W
,

799 0x2fd000 | 
PTE_P
 | 
PTE_W
,

800 0x2„000 | 
PTE_P
 | 
PTE_W
,

801 0x2ff000 | 
PTE_P
 | 
PTE_W
,

802 0x300000 | 
PTE_P
 | 
PTE_W
,

803 0x301000 | 
PTE_P
 | 
PTE_W
,

804 0x302000 | 
PTE_P
 | 
PTE_W
,

805 0x303000 | 
PTE_P
 | 
PTE_W
,

806 0x304000 | 
PTE_P
 | 
PTE_W
,

807 0x305000 | 
PTE_P
 | 
PTE_W
,

808 0x306000 | 
PTE_P
 | 
PTE_W
,

809 0x307000 | 
PTE_P
 | 
PTE_W
,

810 0x308000 | 
PTE_P
 | 
PTE_W
,

811 0x309000 | 
PTE_P
 | 
PTE_W
,

812 0x30a000 | 
PTE_P
 | 
PTE_W
,

813 0x30b000 | 
PTE_P
 | 
PTE_W
,

814 0x30c000 | 
PTE_P
 | 
PTE_W
,

815 0x30d000 | 
PTE_P
 | 
PTE_W
,

816 0x30e000 | 
PTE_P
 | 
PTE_W
,

817 0x30f000 | 
PTE_P
 | 
PTE_W
,

818 0x310000 | 
PTE_P
 | 
PTE_W
,

819 0x311000 | 
PTE_P
 | 
PTE_W
,

820 0x312000 | 
PTE_P
 | 
PTE_W
,

821 0x313000 | 
PTE_P
 | 
PTE_W
,

822 0x314000 | 
PTE_P
 | 
PTE_W
,

823 0x315000 | 
PTE_P
 | 
PTE_W
,

824 0x316000 | 
PTE_P
 | 
PTE_W
,

825 0x317000 | 
PTE_P
 | 
PTE_W
,

826 0x318000 | 
PTE_P
 | 
PTE_W
,

827 0x319000 | 
PTE_P
 | 
PTE_W
,

828 0x31a000 | 
PTE_P
 | 
PTE_W
,

829 0x31b000 | 
PTE_P
 | 
PTE_W
,

830 0x31c000 | 
PTE_P
 | 
PTE_W
,

831 0x31d000 | 
PTE_P
 | 
PTE_W
,

832 0x31e000 | 
PTE_P
 | 
PTE_W
,

833 0x31f000 | 
PTE_P
 | 
PTE_W
,

834 0x320000 | 
PTE_P
 | 
PTE_W
,

835 0x321000 | 
PTE_P
 | 
PTE_W
,

836 0x322000 | 
PTE_P
 | 
PTE_W
,

837 0x323000 | 
PTE_P
 | 
PTE_W
,

838 0x324000 | 
PTE_P
 | 
PTE_W
,

839 0x325000 | 
PTE_P
 | 
PTE_W
,

840 0x326000 | 
PTE_P
 | 
PTE_W
,

841 0x327000 | 
PTE_P
 | 
PTE_W
,

842 0x328000 | 
PTE_P
 | 
PTE_W
,

843 0x329000 | 
PTE_P
 | 
PTE_W
,

844 0x32a000 | 
PTE_P
 | 
PTE_W
,

845 0x32b000 | 
PTE_P
 | 
PTE_W
,

846 0x32c000 | 
PTE_P
 | 
PTE_W
,

847 0x32d000 | 
PTE_P
 | 
PTE_W
,

848 0x32e000 | 
PTE_P
 | 
PTE_W
,

849 0x32f000 | 
PTE_P
 | 
PTE_W
,

850 0x330000 | 
PTE_P
 | 
PTE_W
,

851 0x331000 | 
PTE_P
 | 
PTE_W
,

852 0x332000 | 
PTE_P
 | 
PTE_W
,

853 0x333000 | 
PTE_P
 | 
PTE_W
,

854 0x334000 | 
PTE_P
 | 
PTE_W
,

855 0x335000 | 
PTE_P
 | 
PTE_W
,

856 0x336000 | 
PTE_P
 | 
PTE_W
,

857 0x337000 | 
PTE_P
 | 
PTE_W
,

858 0x338000 | 
PTE_P
 | 
PTE_W
,

859 0x339000 | 
PTE_P
 | 
PTE_W
,

860 0x33a000 | 
PTE_P
 | 
PTE_W
,

861 0x33b000 | 
PTE_P
 | 
PTE_W
,

862 0x33c000 | 
PTE_P
 | 
PTE_W
,

863 0x33d000 | 
PTE_P
 | 
PTE_W
,

864 0x33e000 | 
PTE_P
 | 
PTE_W
,

865 0x33f000 | 
PTE_P
 | 
PTE_W
,

866 0x340000 | 
PTE_P
 | 
PTE_W
,

867 0x341000 | 
PTE_P
 | 
PTE_W
,

868 0x342000 | 
PTE_P
 | 
PTE_W
,

869 0x343000 | 
PTE_P
 | 
PTE_W
,

870 0x344000 | 
PTE_P
 | 
PTE_W
,

871 0x345000 | 
PTE_P
 | 
PTE_W
,

872 0x346000 | 
PTE_P
 | 
PTE_W
,

873 0x347000 | 
PTE_P
 | 
PTE_W
,

874 0x348000 | 
PTE_P
 | 
PTE_W
,

875 0x349000 | 
PTE_P
 | 
PTE_W
,

876 0x34a000 | 
PTE_P
 | 
PTE_W
,

877 0x34b000 | 
PTE_P
 | 
PTE_W
,

878 0x34c000 | 
PTE_P
 | 
PTE_W
,

879 0x34d000 | 
PTE_P
 | 
PTE_W
,

880 0x34e000 | 
PTE_P
 | 
PTE_W
,

881 0x34f000 | 
PTE_P
 | 
PTE_W
,

882 0x350000 | 
PTE_P
 | 
PTE_W
,

883 0x351000 | 
PTE_P
 | 
PTE_W
,

884 0x352000 | 
PTE_P
 | 
PTE_W
,

885 0x353000 | 
PTE_P
 | 
PTE_W
,

886 0x354000 | 
PTE_P
 | 
PTE_W
,

887 0x355000 | 
PTE_P
 | 
PTE_W
,

888 0x356000 | 
PTE_P
 | 
PTE_W
,

889 0x357000 | 
PTE_P
 | 
PTE_W
,

890 0x358000 | 
PTE_P
 | 
PTE_W
,

891 0x359000 | 
PTE_P
 | 
PTE_W
,

892 0x35a000 | 
PTE_P
 | 
PTE_W
,

893 0x35b000 | 
PTE_P
 | 
PTE_W
,

894 0x35c000 | 
PTE_P
 | 
PTE_W
,

895 0x35d000 | 
PTE_P
 | 
PTE_W
,

896 0x35e000 | 
PTE_P
 | 
PTE_W
,

897 0x35f000 | 
PTE_P
 | 
PTE_W
,

898 0x360000 | 
PTE_P
 | 
PTE_W
,

899 0x361000 | 
PTE_P
 | 
PTE_W
,

900 0x362000 | 
PTE_P
 | 
PTE_W
,

901 0x363000 | 
PTE_P
 | 
PTE_W
,

902 0x364000 | 
PTE_P
 | 
PTE_W
,

903 0x365000 | 
PTE_P
 | 
PTE_W
,

904 0x366000 | 
PTE_P
 | 
PTE_W
,

905 0x367000 | 
PTE_P
 | 
PTE_W
,

906 0x368000 | 
PTE_P
 | 
PTE_W
,

907 0x369000 | 
PTE_P
 | 
PTE_W
,

908 0x36a000 | 
PTE_P
 | 
PTE_W
,

909 0x36b000 | 
PTE_P
 | 
PTE_W
,

910 0x36c000 | 
PTE_P
 | 
PTE_W
,

911 0x36d000 | 
PTE_P
 | 
PTE_W
,

912 0x36e000 | 
PTE_P
 | 
PTE_W
,

913 0x36f000 | 
PTE_P
 | 
PTE_W
,

914 0x370000 | 
PTE_P
 | 
PTE_W
,

915 0x371000 | 
PTE_P
 | 
PTE_W
,

916 0x372000 | 
PTE_P
 | 
PTE_W
,

917 0x373000 | 
PTE_P
 | 
PTE_W
,

918 0x374000 | 
PTE_P
 | 
PTE_W
,

919 0x375000 | 
PTE_P
 | 
PTE_W
,

920 0x376000 | 
PTE_P
 | 
PTE_W
,

921 0x377000 | 
PTE_P
 | 
PTE_W
,

922 0x378000 | 
PTE_P
 | 
PTE_W
,

923 0x379000 | 
PTE_P
 | 
PTE_W
,

924 0x37a000 | 
PTE_P
 | 
PTE_W
,

925 0x37b000 | 
PTE_P
 | 
PTE_W
,

926 0x37c000 | 
PTE_P
 | 
PTE_W
,

927 0x37d000 | 
PTE_P
 | 
PTE_W
,

928 0x37e000 | 
PTE_P
 | 
PTE_W
,

929 0x37f000 | 
PTE_P
 | 
PTE_W
,

930 0x380000 | 
PTE_P
 | 
PTE_W
,

931 0x381000 | 
PTE_P
 | 
PTE_W
,

932 0x382000 | 
PTE_P
 | 
PTE_W
,

933 0x383000 | 
PTE_P
 | 
PTE_W
,

934 0x384000 | 
PTE_P
 | 
PTE_W
,

935 0x385000 | 
PTE_P
 | 
PTE_W
,

936 0x386000 | 
PTE_P
 | 
PTE_W
,

937 0x387000 | 
PTE_P
 | 
PTE_W
,

938 0x388000 | 
PTE_P
 | 
PTE_W
,

939 0x389000 | 
PTE_P
 | 
PTE_W
,

940 0x38a000 | 
PTE_P
 | 
PTE_W
,

941 0x38b000 | 
PTE_P
 | 
PTE_W
,

942 0x38c000 | 
PTE_P
 | 
PTE_W
,

943 0x38d000 | 
PTE_P
 | 
PTE_W
,

944 0x38e000 | 
PTE_P
 | 
PTE_W
,

945 0x38f000 | 
PTE_P
 | 
PTE_W
,

946 0x390000 | 
PTE_P
 | 
PTE_W
,

947 0x391000 | 
PTE_P
 | 
PTE_W
,

948 0x392000 | 
PTE_P
 | 
PTE_W
,

949 0x393000 | 
PTE_P
 | 
PTE_W
,

950 0x394000 | 
PTE_P
 | 
PTE_W
,

951 0x395000 | 
PTE_P
 | 
PTE_W
,

952 0x396000 | 
PTE_P
 | 
PTE_W
,

953 0x397000 | 
PTE_P
 | 
PTE_W
,

954 0x398000 | 
PTE_P
 | 
PTE_W
,

955 0x399000 | 
PTE_P
 | 
PTE_W
,

956 0x39a000 | 
PTE_P
 | 
PTE_W
,

957 0x39b000 | 
PTE_P
 | 
PTE_W
,

958 0x39c000 | 
PTE_P
 | 
PTE_W
,

959 0x39d000 | 
PTE_P
 | 
PTE_W
,

960 0x39e000 | 
PTE_P
 | 
PTE_W
,

961 0x39f000 | 
PTE_P
 | 
PTE_W
,

962 0x3a0000 | 
PTE_P
 | 
PTE_W
,

963 0x3a1000 | 
PTE_P
 | 
PTE_W
,

964 0x3a2000 | 
PTE_P
 | 
PTE_W
,

965 0x3a3000 | 
PTE_P
 | 
PTE_W
,

966 0x3a4000 | 
PTE_P
 | 
PTE_W
,

967 0x3a5000 | 
PTE_P
 | 
PTE_W
,

968 0x3a6000 | 
PTE_P
 | 
PTE_W
,

969 0x3a7000 | 
PTE_P
 | 
PTE_W
,

970 0x3a8000 | 
PTE_P
 | 
PTE_W
,

971 0x3a9000 | 
PTE_P
 | 
PTE_W
,

972 0x3Ø000 | 
PTE_P
 | 
PTE_W
,

973 0x3ab000 | 
PTE_P
 | 
PTE_W
,

974 0x3ac000 | 
PTE_P
 | 
PTE_W
,

975 0x3ad000 | 
PTE_P
 | 
PTE_W
,

976 0x3´000 | 
PTE_P
 | 
PTE_W
,

977 0x3af000 | 
PTE_P
 | 
PTE_W
,

978 0x3b0000 | 
PTE_P
 | 
PTE_W
,

979 0x3b1000 | 
PTE_P
 | 
PTE_W
,

980 0x3b2000 | 
PTE_P
 | 
PTE_W
,

981 0x3b3000 | 
PTE_P
 | 
PTE_W
,

982 0x3b4000 | 
PTE_P
 | 
PTE_W
,

983 0x3b5000 | 
PTE_P
 | 
PTE_W
,

984 0x3b6000 | 
PTE_P
 | 
PTE_W
,

985 0x3b7000 | 
PTE_P
 | 
PTE_W
,

986 0x3b8000 | 
PTE_P
 | 
PTE_W
,

987 0x3b9000 | 
PTE_P
 | 
PTE_W
,

988 0x3ba000 | 
PTE_P
 | 
PTE_W
,

989 0x3bb000 | 
PTE_P
 | 
PTE_W
,

990 0x3bc000 | 
PTE_P
 | 
PTE_W
,

991 0x3bd000 | 
PTE_P
 | 
PTE_W
,

992 0x3be000 | 
PTE_P
 | 
PTE_W
,

993 0x3bf000 | 
PTE_P
 | 
PTE_W
,

994 0x3c0000 | 
PTE_P
 | 
PTE_W
,

995 0x3c1000 | 
PTE_P
 | 
PTE_W
,

996 0x3c2000 | 
PTE_P
 | 
PTE_W
,

997 0x3c3000 | 
PTE_P
 | 
PTE_W
,

998 0x3c4000 | 
PTE_P
 | 
PTE_W
,

999 0x3c5000 | 
PTE_P
 | 
PTE_W
,

1000 0x3c6000 | 
PTE_P
 | 
PTE_W
,

1001 0x3c7000 | 
PTE_P
 | 
PTE_W
,

1002 0x3c8000 | 
PTE_P
 | 
PTE_W
,

1003 0x3c9000 | 
PTE_P
 | 
PTE_W
,

1004 0x3ˇ000 | 
PTE_P
 | 
PTE_W
,

1005 0x3cb000 | 
PTE_P
 | 
PTE_W
,

1006 0x3cc000 | 
PTE_P
 | 
PTE_W
,

1007 0x3cd000 | 
PTE_P
 | 
PTE_W
,

1008 0x3˚000 | 
PTE_P
 | 
PTE_W
,

1009 0x3cf000 | 
PTE_P
 | 
PTE_W
,

1010 0x3d0000 | 
PTE_P
 | 
PTE_W
,

1011 0x3d1000 | 
PTE_P
 | 
PTE_W
,

1012 0x3d2000 | 
PTE_P
 | 
PTE_W
,

1013 0x3d3000 | 
PTE_P
 | 
PTE_W
,

1014 0x3d4000 | 
PTE_P
 | 
PTE_W
,

1015 0x3d5000 | 
PTE_P
 | 
PTE_W
,

1016 0x3d6000 | 
PTE_P
 | 
PTE_W
,

1017 0x3d7000 | 
PTE_P
 | 
PTE_W
,

1018 0x3d8000 | 
PTE_P
 | 
PTE_W
,

1019 0x3d9000 | 
PTE_P
 | 
PTE_W
,

1020 0x3da000 | 
PTE_P
 | 
PTE_W
,

1021 0x3db000 | 
PTE_P
 | 
PTE_W
,

1022 0x3dc000 | 
PTE_P
 | 
PTE_W
,

1023 0x3dd000 | 
PTE_P
 | 
PTE_W
,

1024 0x3de000 | 
PTE_P
 | 
PTE_W
,

1025 0x3df000 | 
PTE_P
 | 
PTE_W
,

1026 0x3e0000 | 
PTE_P
 | 
PTE_W
,

1027 0x3e1000 | 
PTE_P
 | 
PTE_W
,

1028 0x3e2000 | 
PTE_P
 | 
PTE_W
,

1029 0x3e3000 | 
PTE_P
 | 
PTE_W
,

1030 0x3e4000 | 
PTE_P
 | 
PTE_W
,

1031 0x3e5000 | 
PTE_P
 | 
PTE_W
,

1032 0x3e6000 | 
PTE_P
 | 
PTE_W
,

1033 0x3e7000 | 
PTE_P
 | 
PTE_W
,

1034 0x3e8000 | 
PTE_P
 | 
PTE_W
,

1035 0x3e9000 | 
PTE_P
 | 
PTE_W
,

1036 0x3ó000 | 
PTE_P
 | 
PTE_W
,

1037 0x3eb000 | 
PTE_P
 | 
PTE_W
,

1038 0x3ec000 | 
PTE_P
 | 
PTE_W
,

1039 0x3ed000 | 
PTE_P
 | 
PTE_W
,

1040 0x3ì000 | 
PTE_P
 | 
PTE_W
,

1041 0x3ef000 | 
PTE_P
 | 
PTE_W
,

1042 0x3f0000 | 
PTE_P
 | 
PTE_W
,

1043 0x3f1000 | 
PTE_P
 | 
PTE_W
,

1044 0x3f2000 | 
PTE_P
 | 
PTE_W
,

1045 0x3f3000 | 
PTE_P
 | 
PTE_W
,

1046 0x3f4000 | 
PTE_P
 | 
PTE_W
,

1047 0x3f5000 | 
PTE_P
 | 
PTE_W
,

1048 0x3f6000 | 
PTE_P
 | 
PTE_W
,

1049 0x3f7000 | 
PTE_P
 | 
PTE_W
,

1050 0x3f8000 | 
PTE_P
 | 
PTE_W
,

1051 0x3f9000 | 
PTE_P
 | 
PTE_W
,

1052 0x3Á000 | 
PTE_P
 | 
PTE_W
,

1053 0x3fb000 | 
PTE_P
 | 
PTE_W
,

1054 0x3fc000 | 
PTE_P
 | 
PTE_W
,

1055 0x3fd000 | 
PTE_P
 | 
PTE_W
,

1056 0x3„000 | 
PTE_P
 | 
PTE_W
,

1057 0x3ff000 | 
PTE_P
 | 
PTE_W
,

1058 
	}
};

	@kern/init.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

7 
	~<kîn/m⁄ô‹.h
>

8 
	~<kîn/c⁄sﬁe.h
>

12 
	$ã°_backåa˚
(
x
)

14 
	`˝rötf
("íãrögÅe°_backåa˚ %d\n", 
x
);

15 i‡(
x
 > 0)

16 
	`ã°_backåa˚
(
x
-1);

18 
	`m⁄_backåa˚
(0, 0, 0);

19 
	`˝rötf
("ÀavögÅe°_backåa˚ %d\n", 
x
);

20 
	}
}

23 
	$i386_öô
()

25 
ed©a
[], 
íd
[];

27 
chnum1
 = 0, 
chnum2
 = 0, 
¡e°
[256] = {};

32 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

36 
	`c⁄s_öô
();

38 
	`˝rötf
("6828 decimÆ i†%ÿo˘Æ!%n\n%n", 6828, &
chnum1
, &
chnum2
);

39 
	`˝rötf
("chnum1: %d chnum2: %d\n", 
chnum1
, 
chnum2
);

40 
	`˝rötf
("%n", 
NULL
);

41 
	`mem£t
(
¡e°
, 0xd, (ntest) - 1);

42 
	`˝rötf
("%s%n", 
¡e°
, &
chnum1
);

43 
	`˝rötf
("chnum1: %d\n", 
chnum1
);

48 
	`ã°_backåa˚
(5);

52 
	`m⁄ô‹
(
NULL
);

53 
	}
}

60 c⁄° *
	g∑nic°r
;

67 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

69 
va_li°
 
≠
;

71 i‡(
∑nic°r
)

72 
dód
;

73 
∑nic°r
 = 
fmt
;

76 
__asm
 
	`__vﬁ©ûe
("cli; cld");

78 
	`va_°¨t
(
≠
, 
fmt
);

79 
	`˝rötf
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

80 
	`v˝rötf
(
fmt
, 
≠
);

81 
	`˝rötf
("\n");

82 
	`va_íd
(
≠
);

84 
dód
:

87 
	`m⁄ô‹
(
NULL
);

88 
	}
}

92 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

94 
va_li°
 
≠
;

96 
	`va_°¨t
(
≠
, 
fmt
);

97 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

98 
	`v˝rötf
(
fmt
, 
≠
);

99 
	`˝rötf
("\n");

100 
	`va_íd
(
≠
);

101 
	}
}

	@kern/kdebug.c

1 
	~<öc/°ab.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/memœyout.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/kdebug.h
>

8 c⁄° 
Sèb
 
__STAB_BEGIN__
[];

9 c⁄° 
Sèb
 
__STAB_END__
[];

10 c⁄° 
__STABSTR_BEGIN__
[];

11 c⁄° 
__STABSTR_END__
[];

51 
	$°ab_bö£¨ch
(c⁄° 
Sèb
 *
°abs
, *
ªgi⁄_À·
, *
ªgi⁄_right
,

52 
ty≥
, 
uöçå_t
 
addr
)

54 
l
 = *
ªgi⁄_À·
, 
r
 = *
ªgi⁄_right
, 
™y_m©ches
 = 0;

56 
l
 <
r
) {

57 
åue_m
 = (
l
 + 
r
Ë/ 2, 
m
 =Årue_m;

60 
m
 >
l
 && 
°abs
[m].
n_ty≥
 !
ty≥
)

61 
m
--;

62 i‡(
m
 < 
l
) {

63 
l
 = 
åue_m
 + 1;

68 
™y_m©ches
 = 1;

69 i‡(
°abs
[
m
].
n_vÆue
 < 
addr
) {

70 *
ªgi⁄_À·
 = 
m
;

71 
l
 = 
åue_m
 + 1;

72 } i‡(
°abs
[
m
].
n_vÆue
 > 
addr
) {

73 *
ªgi⁄_right
 = 
m
 - 1;

74 
r
 = 
m
 - 1;

78 *
ªgi⁄_À·
 = 
m
;

79 
l
 = 
m
;

80 
addr
++;

84 i‡(!
™y_m©ches
)

85 *
ªgi⁄_right
 = *
ªgi⁄_À·
 - 1;

88 
l
 = *
ªgi⁄_right
;

89 
l
 > *
ªgi⁄_À·
 && 
°abs
[l].
n_ty≥
 !
ty≥
;

90 
l
--)

92 *
ªgi⁄_À·
 = 
l
;

94 
	}
}

105 
	$debugöfo_eù
(
uöçå_t
 
addr
, 
Eùdebugöfo
 *
öfo
)

107 c⁄° 
Sèb
 *
°abs
, *
°ab_íd
;

108 c⁄° *
°ab°r
, *
°ab°r_íd
;

109 
lfûe
, 
rfûe
, 
lfun
, 
rfun
, 
Œöe
, 
æöe
;

112 
öfo
->
eù_fûe
 = "<unknown>";

113 
öfo
->
eù_löe
 = 0;

114 
öfo
->
eù_‚_«me
 = "<unknown>";

115 
öfo
->
eù_‚_«mñí
 = 9;

116 
öfo
->
eù_‚_addr
 = 
addr
;

117 
öfo
->
eù_‚_«rg
 = 0;

120 i‡(
addr
 >
ULIM
) {

121 
°abs
 = 
__STAB_BEGIN__
;

122 
°ab_íd
 = 
__STAB_END__
;

123 
°ab°r
 = 
__STABSTR_BEGIN__
;

124 
°ab°r_íd
 = 
__STABSTR_END__
;

127 
	`∑nic
("Useráddress");

131 i‡(
°ab°r_íd
 <
°ab°r
 || stabstr_end[-1] != 0)

140 
lfûe
 = 0;

141 
rfûe
 = (
°ab_íd
 - 
°abs
) - 1;

142 
	`°ab_bö£¨ch
(
°abs
, &
lfûe
, &
rfûe
, 
N_SO
, 
addr
);

143 i‡(
lfûe
 == 0)

148 
lfun
 = 
lfûe
;

149 
rfun
 = 
rfûe
;

150 
	`°ab_bö£¨ch
(
°abs
, &
lfun
, &
rfun
, 
N_FUN
, 
addr
);

152 i‡(
lfun
 <
rfun
) {

155 i‡(
°abs
[
lfun
].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

156 
öfo
->
eù_‚_«me
 = 
°ab°r
 + 
°abs
[
lfun
].
n_°rx
;

157 
öfo
->
eù_‚_addr
 = 
°abs
[
lfun
].
n_vÆue
;

158 
addr
 -
öfo
->
eù_‚_addr
;

160 
Œöe
 = 
lfun
;

161 
æöe
 = 
rfun
;

165 
öfo
->
eù_‚_addr
 = 
addr
;

166 
Œöe
 = 
lfûe
;

167 
æöe
 = 
rfûe
;

170 
öfo
->
eù_‚_«mñí
 = 
	`°rföd
(öfo->
eù_‚_«me
, ':') - info->eip_fn_name;

182 
	`°ab_bö£¨ch
(
°abs
, &
Œöe
, &
æöe
, 
N_SLINE
, 
addr
);

183 i‡(
Œöe
 <
æöe
) {

184 
öfo
->
eù_löe
 = 
°abs
[
Œöe
].
n_desc
;

195 
Œöe
 >
lfûe


196 && 
°abs
[
Œöe
].
n_ty≥
 !
N_SOL


197 && (
°abs
[
Œöe
].
n_ty≥
 !
N_SO
 || !°abs[Œöe].
n_vÆue
))

198 
Œöe
--;

199 i‡(
Œöe
 >
lfûe
 && 
°abs
[Œöe].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

200 
öfo
->
eù_fûe
 = 
°ab°r
 + 
°abs
[
Œöe
].
n_°rx
;

205 i‡(
lfun
 < 
rfun
)

206 
Œöe
 = 
lfun
 + 1;

207 
Œöe
 < 
rfun
 && 
°abs
[Œöe].
n_ty≥
 =
N_PSYM
;

208 
Œöe
++)

209 
öfo
->
eù_‚_«rg
++;

212 
	}
}

	@kern/kdebug.h

1 #i‚de‡
JOS_KERN_KDEBUG_H


2 
	#JOS_KERN_KDEBUG_H


	)

4 
	~<öc/ty≥s.h
>

7 
	sEùdebugöfo
 {

8 c⁄° *
	meù_fûe
;

9 
	meù_löe
;

11 c⁄° *
	meù_‚_«me
;

13 
	meù_‚_«mñí
;

14 
uöçå_t
 
	meù_‚_addr
;

15 
	meù_‚_«rg
;

18 
debugöfo_eù
(
uöçå_t
 
eù
, 
Eùdebugöfo
 *
öfo
);

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/°ab.h
>

11 
	~<kîn/c⁄sﬁe.h
>

12 
	~<kîn/m⁄ô‹.h
>

13 
	~<kîn/kdebug.h
>

15 
	#CMDBUF_SIZE
 80

16 

	)

18 
	sComm™d
 {

19 c⁄° *
	m«me
;

20 c⁄° *
	mdesc
;

22 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

25 
Comm™d
 
	gcomm™ds
[] = {

26 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

27 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

28 { "backåa˚", "Di•œyáÜi°ög o‡fun˘i⁄ cÆ»‰ames", 
m⁄_backåa˚
},

30 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

32 
ªad_eù
();

38 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

40 
i
;

42 
i
 = 0; i < 
NCOMMANDS
; i++)

43 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

45 
	}
}

48 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

50 
íåy
[], 
ëext
[], 
ed©a
[], 
íd
[];

52 
	`˝rötf
("Special kernel symbols:\n");

53 
	`˝rötf
("É¡ry %08x (vútË %08x (phys)\n", 
íåy
,É¡ry - 
KERNBASE
);

54 
	`˝rötf
("Éãxà %08x (vútË %08x (phys)\n", 
ëext
,Éãxà- 
KERNBASE
);

55 
	`˝rötf
("Éd©® %08x (vútË %08x (phys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

56 
	`˝rötf
("Énd %08x (vútË %08x (phys)\n", 
íd
,Énd - 
KERNBASE
);

57 
	`˝rötf
("KernelÉxecutable memory footprint: %dKB\n",

58 (
íd
-
íåy
+1023)/1024);

60 
	}
}

64 
uöt32_t


65 
	$ªad_¥ëaddr
() {

66 
uöt32_t
 
¥ëaddr
;

67 
__asm
 
	`__vﬁ©ûe
("ÀÆ 4(%%ebp), %0" : "Ù" (
¥ëaddr
));

68  
¥ëaddr
;

69 
	}
}

72 
	$do_ovîÊow
()

74 
	`˝rötf
("Overflow success\n");

75 
	}
}

78 
	$°¨t_ovîÊow
()

90 
°r
[256] = {};

91 
n°r
 = 0;

92 *
¥ë_addr
;

95 
chr
;

96 
	`mem£t
(
°r
, 'a', 104);

97 
	`˝rötf
("%s%n", 
°r
, &str[268]);

98 
	`mem£t
(
°r
, 'a', 7);

99 
	`˝rötf
("%s%n", 
°r
, &str[269]);

100 
	`mem£t
(
°r
, 'a', 16);

101 
	`˝rötf
("%s%n", 
°r
, &str[270]);

102 
	`mem£t
(
°r
, 'a', 176);

103 
	`˝rötf
("%s%n", 
°r
, &str[271]);

104 
	}
}

107 
	$ovîÊow_me
()

109 
	`°¨t_ovîÊow
();

110 
	}
}

113 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

115 
	`ovîÊow_me
();

117 
uöt32_t
 
ebp
 = 
	`ªad_ebp
(), *
ebµ
, 
eù
, 
i
;

118 
Eùdebugöfo
 
dbg
;

119 
ebp
 > 0) {

120 
ebµ
 = (
uöt32_t
 *)
ebp
;

121 
eù
 = 
ebµ
[1];

122 
	`˝rötf
("eb∞%xÉù %xárgs", 
ebp
, 
eù
);

123 
i
 = 2; i < 6; i++) {

124 
	`˝rötf
(" %08x", 
ebµ
[
i
]);

126 
	`debugöfo_eù
(
eù
, &
dbg
);

127 
	`˝rötf
("\n\t%s:%d: ", 
dbg
.
eù_fûe
, dbg.
eù_löe
);

128 
i
 = 0; i < 
dbg
.
eù_‚_«mñí
; i++)

129 
	`˝utch¨
(
dbg
.
eù_‚_«me
[
i
]);

130 
	`˝rötf
("+%d\n", 
eù
 - 
dbg
.
eù_‚_addr
);

131 
ebp
 = *
ebµ
;

134 
	`˝rötf
("Backtrace success\n");

136 
	}
}

142 
	#WHITESPACE
 "\t\r\¿"

	)

143 
	#MAXARGS
 16

	)

146 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

148 
¨gc
;

149 *
¨gv
[
MAXARGS
];

150 
i
;

153 
¨gc
 = 0;

154 
¨gv
[
¨gc
] = 0;

157 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

158 *
buf
++ = 0;

159 i‡(*
buf
 == 0)

163 i‡(
¨gc
 =
MAXARGS
-1) {

164 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

167 
¨gv
[
¨gc
++] = 
buf
;

168 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

169 
buf
++;

171 
¨gv
[
¨gc
] = 0;

174 i‡(
¨gc
 == 0)

176 
i
 = 0; i < 
NCOMMANDS
; i++) {

177 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

178  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

180 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

182 
	}
}

185 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

187 *
buf
;

189 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

190 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

194 
buf
 = 
	`ªadlöe
("K> ");

195 i‡(
buf
 !
NULL
)

196 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

199 
	}
}

205 
	$ªad_eù
()

207 
uöt32_t
 
ˇŒîpc
;

208 
__asm
 
	`__vﬁ©ûe
("mov»4(%%ebp), %0" : "Ù" (
ˇŒîpc
));

209  
ˇŒîpc
;

210 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/printf.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°d¨g.h
>

10 
	$putch
(
ch
, *
˙t
)

12 
	`˝utch¨
(
ch
);

13 (*
˙t
)++;

14 
	}
}

17 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

19 
˙t
 = 0;

21 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

22  
˙t
;

23 
	}
}

26 
	$˝rötf
(c⁄° *
fmt
, ...)

28 
va_li°
 
≠
;

29 
˙t
;

31 
	`va_°¨t
(
≠
, 
fmt
);

32 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

33 
	`va_íd
(
≠
);

35  
˙t
;

36 
	}
}

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/°d¨g.h
>

9 
	~<öc/îr‹.h
>

21 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
] =

23 [
E_UNSPECIFIED
] = "unspecifiedÉrror",

24 [
E_BAD_ENV
] = "badÉnvironment",

25 [
E_INVAL
] = "invalidÖarameter",

26 [
E_NO_MEM
] = "out of memory",

27 [
E_NO_FREE_ENV
] = "out ofÉnvironments",

28 [
E_FAULT
] = "segmentation fault",

36 
¥öäum
((*
putch
)(, *), *
putd©
,

37 
num
, 
ba£
, 
width
, 
∑dc
)

40 i‡(
num
 >
ba£
) {

41 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

44 --
width
 > 0)

45 
	`putch
(
∑dc
, 
putd©
);

49 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

50 
	}
}

55 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

57 i‡(
lÊag
 >= 2)

58  
	`va_¨g
(*
≠
, );

59 i‡(
lÊag
)

60  
	`va_¨g
(*
≠
, );

62  
	`va_¨g
(*
≠
, );

63 
	}
}

68 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

70 i‡(
lÊag
 >= 2)

71  
	`va_¨g
(*
≠
, );

72 i‡(
lÊag
)

73  
	`va_¨g
(*
≠
, );

75  
	`va_¨g
(*
≠
, );

76 
	}
}

80 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

83 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

85 c⁄° *
p
;

86 
ch
, 
îr
;

87 
num
;

88 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

89 
∑dc
;

92 (
ch
 = *(*Ë
fmt
++) != '%') {

93 i‡(
ch
 == '\0')

95 
	`putch
(
ch
, 
putd©
);

99 
∑dc
 = ' ';

100 
width
 = -1;

101 
¥ecisi⁄
 = -1;

102 
lÊag
 = 0;

103 
ÆtÊag
 = 0;

104 
ªswôch
:

105 
ch
 = *(*Ë
fmt
++) {

109 
∑dc
 = '-';

110 
ªswôch
;

114 
∑dc
 = '0';

115 
ªswôch
;

127 
¥ecisi⁄
 = 0; ; ++
fmt
) {

128 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

129 
ch
 = *
fmt
;

130 i‡(
ch
 < '0' || ch > '9')

133 
¥o˚ss_¥ecisi⁄
;

136 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

137 
¥o˚ss_¥ecisi⁄
;

140 i‡(
width
 < 0)

141 
width
 = 0;

142 
ªswôch
;

145 
ÆtÊag
 = 1;

146 
ªswôch
;

148 
¥o˚ss_¥ecisi⁄
:

149 i‡(
width
 < 0)

150 
width
 = 
¥ecisi⁄
,Örecision = -1;

151 
ªswôch
;

155 
lÊag
++;

156 
ªswôch
;

160 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

165 
îr
 = 
	`va_¨g
(
≠
, );

166 i‡(
îr
 < 0)

167 
îr
 = -err;

168 i‡(
îr
 >
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

169 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

171 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

176 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
)

177 
p
 = "(null)";

178 i‡(
width
 > 0 && 
∑dc
 != '-')

179 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

180 
	`putch
(
∑dc
, 
putd©
);

181 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

182 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

183 
	`putch
('?', 
putd©
);

185 
	`putch
(
ch
, 
putd©
);

186 ; 
width
 > 0; width--)

187 
	`putch
(' ', 
putd©
);

192 
num
 = 
	`gëöt
(&
≠
, 
lÊag
);

193 i‡((Ë
num
 < 0) {

194 
	`putch
('-', 
putd©
);

195 
num
 = -()Çum;

197 
ba£
 = 10;

198 
numbî
;

202 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

203 
ba£
 = 10;

204 
numbî
;

212 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

213 
ba£
 = 8;

214 
numbî
;

219 
	`putch
('0', 
putd©
);

220 
	`putch
('x', 
putd©
);

221 
num
 = ()

222 (
uöçå_t
Ë
	`va_¨g
(
≠
, *);

223 
ba£
 = 16;

224 
numbî
;

228 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

229 
ba£
 = 16;

230 
numbî
:

231 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

251 c⁄° *
nuŒ_îr‹
 = "\nerror! writingÅhrough NULLÖointer! (%nárgument)\n";

252 c⁄° *
ovîÊow_îr‹
 = "\nwarning! The value %nárgumentÖointedÅo has been overflowed!\n";

255 
i
 = 0;

256 *
pch
;

257 i‡((
pch
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
) {

258 
i
0; i < 
	`°æí
(
nuŒ_îr‹
);i++)

259 
	`putch
(
nuŒ_îr‹
[
i
], 
putd©
);

261 i‡(*(*)
putd©
 > 127) {

262 *
pch
 = 127;

263 
i
 = 0; i < 
	`°æí
(
ovîÊow_îr‹
); i++)

264 
	`putch
(
ovîÊow_îr‹
[
i
], 
putd©
);

266 *
pch
 = *(*)
putd©
;

274 
	`putch
(
ch
, 
putd©
);

279 
	`putch
('%', 
putd©
);

280 
fmt
--; fmt[-1] != '%'; fmt--)

285 
	}
}

288 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

290 
va_li°
 
≠
;

292 
	`va_°¨t
(
≠
, 
fmt
);

293 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

294 
	`va_íd
(
≠
);

295 
	}
}

297 
	s•rötbuf
 {

298 *
	mbuf
;

299 *
	mebuf
;

300 
	m˙t
;

304 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

306 
b
->
˙t
++;

307 i‡(
b
->
buf
 < b->
ebuf
)

308 *
b
->
buf
++ = 
ch
;

309 
	}
}

312 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

314 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

316 i‡(
buf
 =
NULL
 || 
n
 < 1)

317  -
E_INVAL
;

320 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

323 *
b
.
buf
 = '\0';

325  
b
.
˙t
;

326 
	}
}

329 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

331 
va_li°
 
≠
;

332 
rc
;

334 
	`va_°¨t
(
≠
, 
fmt
);

335 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
≠
);

336 
	`va_íd
(
≠
);

338  
rc
;

339 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/îr‹.h
>

4 
	#BUFLEN
 1024

	)

5 
	gbuf
[
BUFLEN
];

8 
	$ªadlöe
(c⁄° *
¥om±
)

10 
i
, 
c
, 
echoög
;

12 i‡(
¥om±
 !
NULL
)

13 
	`˝rötf
("%s", 
¥om±
);

15 
i
 = 0;

16 
echoög
 = 
	`isc⁄s
(0);

18 
c
 = 
	`gëch¨
();

19 i‡(
c
 < 0) {

20 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

21  
NULL
;

22 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

23 i‡(
echoög
)

24 
	`˝utch¨
('\b');

25 
i
--;

26 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

27 i‡(
echoög
)

28 
	`˝utch¨
(
c
);

29 
buf
[
i
++] = 
c
;

30 } i‡(
c
 == '\n' || c == '\r') {

31 i‡(
echoög
)

32 
	`˝utch¨
('\n');

33 
buf
[
i
] = 0;

34  
buf
;

37 
	}
}

	@lib/string.c

3 
	~<öc/°rög.h
>

9 
	#ASM
 1

	)

12 
	$°æí
(c⁄° *
s
)

14 
n
;

16 
n
 = 0; *
s
 != '\0'; s++)

17 
n
++;

18  
n
;

19 
	}
}

22 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

24 
n
;

26 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

27 
n
++;

28  
n
;

29 
	}
}

32 
	$°r˝y
(*
d°
, c⁄° *
§c
)

34 *
ªt
;

36 
ªt
 = 
d°
;

37 (*
d°
++ = *
§c
++) != '\0')

39  
ªt
;

40 
	}
}

43 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

44 
size_t
 
i
;

45 *
ªt
;

47 
ªt
 = 
d°
;

48 
i
 = 0; i < 
size
; i++) {

49 *
d°
++ = *
§c
;

51 i‡(*
§c
 != '\0')

52 
§c
++;

54  
ªt
;

55 
	}
}

57 
size_t


58 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

60 *
d°_ö
;

62 
d°_ö
 = 
d°
;

63 i‡(
size
 > 0) {

64 --
size
 > 0 && *
§c
 != '\0')

65 *
d°
++ = *
§c
++;

66 *
d°
 = '\0';

68  
d°
 - 
d°_ö
;

69 
	}
}

72 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

74 *
p
 && *∞=*
q
)

75 
p
++, 
q
++;

76  (Ë((Ë*
p
 - (Ë*
q
);

77 
	}
}

80 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

82 
n
 > 0 && *
p
 && *∞=*
q
)

83 
n
--, 
p
++, 
q
++;

84 i‡(
n
 == 0)

87  (Ë((Ë*
p
 - (Ë*
q
);

88 
	}
}

93 
	$°rchr
(c⁄° *
s
, 
c
)

95 ; *
s
; s++)

96 i‡(*
s
 =
c
)

97  (*Ë
s
;

99 
	}
}

104 
	$°rföd
(c⁄° *
s
, 
c
)

106 ; *
s
; s++)

107 i‡(*
s
 =
c
)

109  (*Ë
s
;

110 
	}
}

112 #i‡
ASM


114 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

116 *
p
;

118 i‡(
n
 == 0)

119  
v
;

120 i‡(()
v
%4 =0 && 
n
%4 == 0) {

121 
c
 &= 0xFF;

122 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

123 
asm
 volatile("cld;Ñep stosl\n"

124 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

127 
asm
 volatile("cld;Ñep stosb\n"

128 :: "D" (
v
), "a" (
c
), "c" (
n
)

130  
v
;

131 
	}
}

134 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

136 c⁄° *
s
;

137 *
d
;

139 
s
 = 
§c
;

140 
d
 = 
d°
;

141 i‡(
s
 < 
d
 && s + 
n
 > d) {

142 
s
 +
n
;

143 
d
 +
n
;

144 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

145 
asm
 volatile("std;Ñep movsl\n"

146 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

148 
asm
 volatile("std;Ñep movsb\n"

149 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

151 
asm
 volatile("cld" ::: "cc");

153 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

154 
asm
 volatile("cld;Ñep movsl\n"

155 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

157 
asm
 volatile("cld;Ñep movsb\n"

158 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

160  
d°
;

161 
	}
}

166 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

168 *
p
;

169 
m
;

171 
p
 = 
v
;

172 
m
 = 
n
;

173 --
m
 >= 0)

174 *
p
++ = 
c
;

176  
v
;

177 
	}
}

182 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

184 c⁄° *
s
;

185 *
d
;

187 
s
 = 
§c
;

188 
d
 = 
d°
;

189 i‡(
s
 < 
d
 && s + 
n
 > d) {

190 
s
 +
n
;

191 
d
 +
n
;

192 
n
-- > 0)

193 *--
d
 = *--
s
;

195 
n
-- > 0)

196 *
d
++ = *
s
++;

198  
d°
;

199 
	}
}

205 
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

207  
	`memmove
(
d°
, 
§c
, 
n
);

208 
	}
}

211 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

213 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

214 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

216 
n
-- > 0) {

217 i‡(*
s1
 !*
s2
)

218  (Ë*
s1
 - (Ë*
s2
;

219 
s1
++, 
s2
++;

223 
	}
}

226 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

228 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

229 ; 
s
 < 
íds
; s++)

230 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

232  (*Ë
s
;

233 
	}
}

236 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

238 
√g
 = 0;

239 
vÆ
 = 0;

242 *
s
 == ' ' || *s == '\t')

243 
s
++;

246 i‡(*
s
 == '+')

247 
s
++;

248 i‡(*
s
 == '-')

249 
s
++, 
√g
 = 1;

252 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

253 
s
 +2, 
ba£
 = 16;

254 i‡(
ba£
 =0 && 
s
[0] == '0')

255 
s
++, 
ba£
 = 8;

256 i‡(
ba£
 == 0)

257 
ba£
 = 10;

261 
dig
;

263 i‡(*
s
 >= '0' && *s <= '9')

264 
dig
 = *
s
 - '0';

265 i‡(*
s
 >= 'a' && *s <= 'z')

266 
dig
 = *
s
 - 'a' + 10;

267 i‡(*
s
 >= 'A' && *s <= 'Z')

268 
dig
 = *
s
 - 'A' + 10;

271 i‡(
dig
 >
ba£
)

273 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

277 i‡(
íd±r
)

278 *
íd±r
 = (*Ë
s
;

279  (
√g
 ? -
vÆ
 : val);

280 
	}
}

	@
1
.
1
/usr/include
27
357
boot/main.c
inc/assert.h
inc/elf.h
inc/error.h
inc/kbdreg.h
inc/malloc.h
inc/memlayout.h
inc/mmu.h
inc/queue.h
inc/stab.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/types.h
inc/x86.h
kern/console.c
kern/console.h
kern/entrypgdir.c
kern/init.c
kern/kdebug.c
kern/kdebug.h
kern/monitor.c
kern/monitor.h
kern/printf.c
lib/printfmt.c
lib/readline.c
lib/string.c
